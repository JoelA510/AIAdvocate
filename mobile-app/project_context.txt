---
File: app/legislator/[id].tsx
---
// mobile-app/app/legislator/[id].tsx
import { useLocalSearchParams, useRouter, Stack } from "expo-router";
import React, { useEffect, useMemo, useState } from "react";
import { View, StyleSheet, ScrollView } from "react-native";
import { useSafeAreaInsets } from "react-native-safe-area-context";
import { useTranslation } from "react-i18next";
import { useTheme, Card, Text, Button, ActivityIndicator, Divider } from "react-native-paper";
import { supabase } from "../../src/lib/supabase";
import EmptyState from "../../src/components/EmptyState";

type VoteRow = {
  id?: string | number;
  bill_id?: number;
  bill_number?: string | null;
  bill_title?: string | null;
  bill_slug?: string | null;
  option?: string | null; // yes/no/abstain/absent
  result?: string | null; // passed/failed
  yes_count?: number | null;
  no_count?: number | null;
  other_count?: number | null;
  date?: string | null;
};

type Legislator = {
  id: string | number;
  name?: string;
  party?: string | null;
  district?: string | number | null;
};

export default function LegislatorScreen() {
  const { id } = useLocalSearchParams<{ id: string }>();
  const router = useRouter();
  const insets = useSafeAreaInsets();
  const theme = useTheme();
  const { t } = useTranslation();

  const [leg, setLeg] = useState<Legislator | null>(null);
  const [votes, setVotes] = useState<VoteRow[]>([]);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    let isMounted = true;
    const load = async () => {
      setLoading(true);
      try {
        // Try a straightforward legislator lookup
        const L = await supabase.from("legislators").select("*").eq("id", id).maybeSingle();
        if (!L.error && L.data) setLeg(L.data as any);

        // Try a few possible vote table shapes
        let rows: VoteRow[] = [];

        // A) votes table with joins flattened by a view
        const A = await supabase
          .from("votes_view")
          .select("*")
          .eq("legislator_id", id)
          .order("date", { ascending: false })
          .limit(100);
        if (!A.error && A.data?.length) rows = A.data as any[];

        // B) votes table + bills join manually
        if (!rows.length) {
          const V = await supabase
            .from("votes")
            .select("id,bill_id,option,result,yes_count,no_count,other_count,date")
            .eq("legislator_id", id)
            .order("date", { ascending: false })
            .limit(100);
          if (!V.error && V.data?.length) {
            const ids = (V.data as any[]).map((r) => r.bill_id).filter(Boolean);
            let billsMap = new Map<string, any>();
            if (ids.length) {
              const B = await supabase.from("bills").select("id,bill_number,title,slug").in("id", ids);
              if (!B.error && B.data) {
                billsMap = new Map(B.data.map((b: any) => [String(b.id), b]));
              }
            }
            rows = (V.data as any[]).map((r) => {
              const b = billsMap.get(String(r.bill_id));
              return {
                id: r.id,
                bill_id: r.bill_id,
                bill_number: b?.bill_number,
                bill_title: b?.title,
                bill_slug: b?.slug,
                option: r.option,
                result: r.result,
                yes_count: r.yes_count,
                no_count: r.no_count,
                other_count: r.other_count,
                date: r.date,
              } as VoteRow;
            });
          }
        }

        // C) roll_calls by legislator_id (another common shape)
        if (!rows.length) {
          const R = await supabase
            .from("roll_calls")
            .select("id,bill_id,option,result,yes_count,no_count,other_count,date,legislator_id")
            .eq("legislator_id", id)
            .order("date", { ascending: false })
            .limit(100);
          if (!R.error && R.data?.length) {
            const ids = (R.data as any[]).map((r) => r.bill_id).filter(Boolean);
            let billsMap = new Map<string, any>();
            if (ids.length) {
              const B = await supabase.from("bills").select("id,bill_number,title,slug").in("id", ids);
              if (!B.error && B.data) {
                billsMap = new Map(B.data.map((b: any) => [String(b.id), b]));
              }
            }
            rows = (R.data as any[]).map((r) => {
              const b = billsMap.get(String(r.bill_id));
              return {
                id: r.id,
                bill_id: r.bill_id,
                bill_number: b?.bill_number,
                bill_title: b?.title,
                bill_slug: b?.slug,
                option: r.option,
                result: r.result,
                yes_count: r.yes_count,
                no_count: r.no_count,
                other_count: r.other_count,
                date: r.date,
              } as VoteRow;
            });
          }
        }

        if (isMounted) setVotes(rows);
      } catch {
        if (isMounted) setVotes([]);
      } finally {
        if (isMounted) setLoading(false);
      }
    };
    load();
    return () => {
      isMounted = false;
    };
  }, [id]);

  const header = useMemo(() => {
    const parts = [];
    if (leg?.name) parts.push(leg.name);
    if (leg?.party) parts.push(leg.party);
    if (leg?.district) parts.push(`${t("legislator.district", "District")} ${leg.district}`);
    return parts.join(" • ");
  }, [leg, t]);

  if (loading) {
    return (
      <View style={[styles.center, { paddingTop: insets.top }]}>
        <ActivityIndicator />
      </View>
    );
  }

  return (
    <View style={{ flex: 1, paddingTop: insets.top, paddingBottom: insets.bottom }}>
      <Stack.Screen options={{ title: leg?.name || t("legislator.votingRecord", "Voting Record") }} />
      <ScrollView contentContainerStyle={{ padding: 16 }}>
        <Text variant="titleLarge" style={{ marginBottom: 12 }}>
          {header || t("legislator.votingRecord", "Voting Record")}
        </Text>

        {!votes.length ? (
          <EmptyState
            icon="person.crop.circle.badge.questionmark"
            title={t("legislator.votingRecord", "Voting Record")}
            message={t("relatedBills.error", "Could not load related bills.")}
          />
        ) : (
          votes.map((v) => (
            <Card key={String(v.id)} style={{ marginBottom: 12 }} mode="outlined">
              <Card.Title
                title={`${v.bill_number ?? v.bill_slug ?? v.bill_id ?? "—"}`}
                subtitle={v.bill_title ?? ""}
              />
              <Card.Content>
                <Text>
                  {t("legislator.vote", "Vote: {{option}}", { option: String(v.option ?? "—") })}
                </Text>
                <Text>{`${t("legislator.votingRecord", "Voting Record")}: ${String(v.result ?? "—")}`}</Text>
                <Divider style={{ marginVertical: 8 }} />
                <Text>{`Yes: ${v.yes_count ?? 0} • No: ${v.no_count ?? 0} • Other: ${v.other_count ?? 0}`}</Text>
                {v.date && <Text style={{ opacity: 0.6, marginTop: 6 }}>{new Date(v.date).toLocaleString()}</Text>}
              </Card.Content>
              <Card.Actions>
                <Button mode="text" onPress={() => router.push(`/bill/${v.bill_id}`)}>
                  {t("tabs.bills", "Bills")}
                </Button>
              </Card.Actions>
            </Card>
          ))
        )}
      </ScrollView>
    </View>
  );
}

const styles = StyleSheet.create({
  center: { flex: 1, justifyContent: "center", alignItems: "center" },
});

---
File: app/(tabs)/_layout.tsx
---
// mobile-app/app/(tabs)/_layout.tsx
import React from "react";
import { Text, Platform, Image } from "react-native";
import { Tabs } from "expo-router";
import { useTranslation } from "react-i18next";
import { useTheme } from "react-native-paper";
import HeaderBanner from "../../components/ui/HeaderBanner";
import { MaterialCommunityIcons } from "@expo/vector-icons";

// LNF tab icon: mobile-app/assets/images/LNFmini.png
const lnfIcon = require("../../assets/images/LNFmini.png");

export default function TabsLayout() {
  const { t } = useTranslation();
  const theme = useTheme();

  const labelEl =
    (s: string) =>
    ({ color }: { focused: boolean; color: string }) => (
      <Text style={{ color, fontSize: 12, fontWeight: "500", textTransform: "none" }} numberOfLines={1}>
        {s}
      </Text>
    );

  return (
    <>
      {/* Force the banner to show on all tabs, including the index/Bills tab */}
      <HeaderBanner forceShow />
      <Tabs
        initialRouteName="highlighted"
        screenOptions={{
          headerShown: false,
          tabBarActiveTintColor: theme.colors.primary,
          tabBarInactiveTintColor: theme.colors.onSurfaceDisabled ?? "#888",
          tabBarLabelStyle: { fontSize: 12, fontWeight: "500", textTransform: "none" },
          tabBarStyle: {
            borderTopWidth: Platform.OS === "web" ? 0 : undefined,
            backgroundColor: theme.colors.surface,
          },
          lazy: true,
        }}
      >
        <Tabs.Screen
          name="highlighted"
          options={{
            tabBarLabel: labelEl(t("tabs.highlighted", { defaultValue: "Highlighted" })),
            tabBarIcon: ({ color, size }) => <MaterialCommunityIcons name="star" color={color} size={size} />,
          }}
        />
        <Tabs.Screen
          name="saved"
          options={{
            tabBarLabel: labelEl(t("tabs.saved", { defaultValue: "Saved" })),
            tabBarIcon: ({ color, size }) => <MaterialCommunityIcons name="bookmark" color={color} size={size} />,
          }}
        />
        <Tabs.Screen
          name="index"
          options={{
            tabBarLabel: labelEl(t("tabs.bills", { defaultValue: "Bills" })),
            tabBarIcon: ({ color, size }) => <MaterialCommunityIcons name="file-document" color={color} size={size} />,
          }}
        />
        <Tabs.Screen
          name="lnf"
          options={{
            tabBarLabel: labelEl(t("tabs.lnf", { defaultValue: "LNF" })),
            // Use image + tintColor so it behaves like other icons
            tabBarIcon: ({ color, size }) => (
              <Image source={lnfIcon} style={{ width: size, height: size, tintColor: color }} resizeMode="contain" />
            ),
          }}
        />
        <Tabs.Screen
          name="advocacy"
          options={{
            tabBarLabel: labelEl(t("tabs.advocacy", { defaultValue: "Advocacy" })),
            tabBarIcon: ({ color, size }) => <MaterialCommunityIcons name="bullhorn" color={color} size={size} />,
          }}
        />

        {/* Explicitly register the Language route and hide it from the tab bar */}
        <Tabs.Screen
          name="language"
          options={{
            tabBarButton: () => null, // hide from UI (do not combine with href: null)
          }}
        />
      </Tabs>
    </>
  );
}

---
File: app/(tabs)/saved.tsx
---
// mobile-app/app/(tabs)/saved.tsx
import React, { useCallback, useMemo, useState } from "react";
import { StyleSheet, FlatList, View, RefreshControl } from "react-native";
import { useSafeAreaInsets } from "react-native-safe-area-context";
import { useFocusEffect, Stack } from "expo-router";
import { useTranslation } from "react-i18next";

import { ThemedView } from "../../components/ThemedView";
import BillComponent, { Bill } from "../../src/components/Bill";
import BillSkeleton from "../../src/components/BillSkeleton";
import EmptyState from "../../src/components/EmptyState";
import { supabase } from "../../src/lib/supabase";
import { useAuth } from "../../src/providers/AuthProvider";

type SavedRow = {
  created_at: string;
  bill?: Bill | null;
  bill_id?: string | number | null;
  bill_slug?: string | null;
  bill_number?: string | null;
};

export default function SavedBillsScreen() {
  const { t } = useTranslation();
  const insets = useSafeAreaInsets();
  const { session } = useAuth();

  const [bills, setBills] = useState<Bill[]>([]);
  const [loading, setLoading] = useState(true);
  const [refreshing, setRefreshing] = useState(false);
  const userId = session?.user?.id;

  const fetchBillsByIds = async (ids: (string | number)[]) => {
    if (!ids.length) return [] as Bill[];
    const { data, error } = await supabase.from("bills").select("*").in("id", ids);
    if (error) throw error;
    return (data ?? []) as Bill[];
  };

  const load = useCallback(async () => {
    if (!userId) {
      setBills([]);
      setLoading(false);
      return;
    }
    setLoading(true);
    try {
      // A) Try FK join on saved_bills → bills
      const tryJoin = await supabase
        .from("saved_bills")
        .select("created_at, bill:bills(*)")
        .eq("user_id", userId)
        .order("created_at", { ascending: false })
        .limit(200);

      if (!tryJoin.error && tryJoin.data?.length && tryJoin.data[0]?.bill) {
        setBills(tryJoin.data.map((r: any) => r.bill).filter(Boolean));
        setLoading(false);
        return;
      }

      // B) saved_bills simple read
      const trySaved = await supabase
        .from("saved_bills")
        .select("created_at,bill_id,bill_slug,bill_number")
        .eq("user_id", userId)
        .order("created_at", { ascending: false })
        .limit(200);

      if (!trySaved.error && trySaved.data?.length) {
        const rows = (trySaved.data as SavedRow[]).filter(Boolean);
        const ids = rows.map((r) => r.bill_id).filter(Boolean) as (string | number)[];
        if (ids.length) {
          const data = await fetchBillsByIds(ids);
          // preserve order
          const map = new Map(data.map((b) => [String((b as any).id), b]));
          const ordered = ids.map((id) => map.get(String(id))).filter(Boolean) as Bill[];
          setBills(ordered);
          setLoading(false);
          return;
        }
      }

      // C) bookmarks table (common pattern)
      const tryBookmarks = await supabase
        .from("bookmarks")
        .select("created_at,bill_id")
        .eq("user_id", userId)
        .order("created_at", { ascending: false })
        .limit(200);

      if (!tryBookmarks.error && tryBookmarks.data?.length) {
        const ids = (tryBookmarks.data as any[]).map((r) => r.bill_id).filter(Boolean);
        const data = await fetchBillsByIds(ids);
        const map = new Map(data.map((b) => [String((b as any).id), b]));
        const ordered = ids.map((id: any) => map.get(String(id))).filter(Boolean) as Bill[];
        setBills(ordered);
        setLoading(false);
        return;
      }

      // D) user_bookmarks (another common name)
      const tryUserBookmarks = await supabase
        .from("user_bookmarks")
        .select("created_at,bill_id")
        .eq("user_id", userId)
        .order("created_at", { ascending: false })
        .limit(200);

      if (!tryUserBookmarks.error && tryUserBookmarks.data?.length) {
        const ids = (tryUserBookmarks.data as any[]).map((r) => r.bill_id).filter(Boolean);
        const data = await fetchBillsByIds(ids);
        const map = new Map(data.map((b) => [String((b as any).id), b]));
        const ordered = ids.map((id: any) => map.get(String(id))).filter(Boolean) as Bill[];
        setBills(ordered);
        setLoading(false);
        return;
      }

      // If all attempts failed/empty:
      setBills([]);
    } catch {
      setBills([]);
    } finally {
      setLoading(false);
    }
  }, [userId]);

  useFocusEffect(React.useCallback(() => { load(); }, [load]));

  React.useEffect(() => {
    if (!userId) return;
    const ch = supabase
      .channel(`saved_any_${userId}`)
      .on("postgres_changes", { event: "*", schema: "public", table: "saved_bills", filter: `user_id=eq.${userId}` }, () => load())
      .on("postgres_changes", { event: "*", schema: "public", table: "bookmarks", filter: `user_id=eq.${userId}` }, () => load())
      .on("postgres_changes", { event: "*", schema: "public", table: "user_bookmarks", filter: `user_id=eq.${userId}` }, () => load())
      .subscribe();
    return () => { supabase.removeChannel(ch); };
  }, [userId, load]);

  const onRefresh = React.useCallback(async () => {
    setRefreshing(true);
    await load();
    setRefreshing(false);
  }, [load]);

  const renderItem = ({ item }: { item: Bill }) => <BillComponent bill={item} />;

  const content = useMemo(() => {
    if (loading) {
      return (
        <View style={{ gap: 12 }}>
          <BillSkeleton />
          <BillSkeleton />
          <BillSkeleton />
        </View>
      );
    }
    if (!bills.length) {
      return (
        <EmptyState
          icon="bookmark.fill"
          title={t("saved.emptyTitle", { defaultValue: "No saved bills yet" })}
          message={t("saved.emptySubtitle", {
            defaultValue: "Tap the bookmark icon on any bill to save it here.",
          })}
        />
      );
    }
    return (
      <FlatList
        data={bills}
        keyExtractor={(b) => String((b as any).id ?? Math.random())}
        renderItem={renderItem}
        contentContainerStyle={{ paddingBottom: insets.bottom + 16 }}
        showsVerticalScrollIndicator={false}
        refreshControl={<RefreshControl refreshing={refreshing} onRefresh={onRefresh} />}
      />
    );
  }, [loading, bills, insets.bottom, refreshing, onRefresh, t]);

  return (
    <ThemedView style={[styles.container, { paddingTop: insets.top }]}>
      <Stack.Screen options={{ title: t("tabs.saved", { defaultValue: "Saved" }), headerShown: false }} />
      <View style={styles.content}>{content}</View>
    </ThemedView>
  );
}

const styles = StyleSheet.create({
  container: { flex: 1 },
  content: { flex: 1, paddingHorizontal: 16 },
});

---
File: app/(tabs)/lnf.tsx
---
// mobile-app/app/(tabs)/lnf.tsx (modified)
import React from "react";
import { StyleSheet, View, Platform, Linking, Pressable } from "react-native";
import { Stack } from "expo-router";
import { useTranslation } from "react-i18next";
import { useSafeAreaInsets } from "react-native-safe-area-context";
import { WebView } from "react-native-webview";
import { ThemedView } from "../../components/ThemedView";
import { ThemedText } from "../../components/ThemedText";
import { useTheme, Card, Button } from "react-native-paper";

const FEED_URL = (process.env.EXPO_PUBLIC_LNF_URL?.trim() ||
  "https://www.loveneverfailsus.com/") as string;

export default function LnfScreen() {
  const { t } = useTranslation();
  const insets = useSafeAreaInsets();
  const theme = useTheme();

  return (
    <ThemedView style={styles.container}>
      <Stack.Screen
        options={{ title: t("tabs.lnf", { defaultValue: "LNF" }), headerShown: false }}
      />
      {/* Apply safe-area padding for top/bottom; horizontal padding only on web */}
      <View
        style={[
          styles.content,
          {
            paddingTop: insets.top,
            paddingBottom: insets.bottom,
          },
        ]}
      >
        {Platform.OS === "web" ? (
          <Card mode="elevated" style={styles.heroCard}>
            <Pressable onPress={() => Linking.openURL(FEED_URL)} style={{ flex: 1 }}>
              <View style={styles.heroBody}>
                <ThemedText type="title" style={{ marginBottom: 8 }}>
                  {t("lnf.webBestAtSource", { defaultValue: "Best experienced on the website" })}
                </ThemedText>
                <ThemedText style={{ opacity: 0.8, marginBottom: 16 }}>
                  {t("lnf.webCspNote", {
                    defaultValue:
                      "This publisher blocks embedding for security. Click below to open the feed directly.",
                  })}
                </ThemedText>
                <Button mode="contained" onPress={() => Linking.openURL(FEED_URL)}>
                  {t("lnf.open", { defaultValue: "Open Feed" })}
                </Button>
              </View>
            </Pressable>
          </Card>
        ) : (
          <WebView
            source={{ uri: FEED_URL }}
            startInLoadingState
            setSupportMultipleWindows={false}
            style={{ flex: 1 }}
          />
        )}
      </View>
    </ThemedView>
  );
}

const styles = StyleSheet.create({
  container: { flex: 1 },
  // Remove horizontal padding on mobile; keep 16px on web.
  content: {
    flex: 1,
    paddingHorizontal: Platform.OS === "web" ? 16 : 0,
  },
  heroCard: { flex: 1, justifyContent: "center" },
  heroBody: { flex: 1, justifyContent: "center", alignItems: "center", padding: 24, gap: 8 },
});

---
File: app/(tabs)/advocacy.tsx
---
// mobile-app/app/(tabs)/advocacy.tsx (hotfix)
import React, { useEffect, useState } from "react";
import { View } from "react-native";
import { Stack } from "expo-router";
import { useSafeAreaInsets } from "react-native-safe-area-context";
import { useTranslation } from "react-i18next";
import { ThemedView } from "../../components/ThemedView";
import { ThemedText } from "../../components/ThemedText";
import { Menu, Button } from "react-native-paper";
import { supabase } from "../../src/lib/supabase";
import FindYourRep from "../../src/components/FindYourRep";
import type { Bill } from "../../src/components/Bill";

export default function AdvocacyScreen() {
  const { t } = useTranslation();
  const insets = useSafeAreaInsets();

  const [bills, setBills] = useState<Bill[]>([]);
  const [selectedBill, setSelectedBill] = useState<Bill | null>(null);
  const [menuVisible, setMenuVisible] = useState(false);

  useEffect(() => {
    let isMounted = true;
    const loadBills = async () => {
      try {
        const { data, error } = await supabase
          .from("bills")
          .select("id, bill_number, title, slug")
          .order("id", { ascending: false })
          .limit(20);
        if (!error && data && isMounted) setBills(data as unknown as Bill[]);
      } catch {}
    };
    loadBills();
    return () => { isMounted = false; };
  }, []);

  return (
    <ThemedView style={{ flex: 1 }}>
      <Stack.Screen options={{ title: t("tabs.advocacy", { defaultValue: "Advocacy" }), headerShown: false }} />
      <View style={{ flex: 1, paddingTop: insets.top, paddingBottom: insets.bottom, paddingHorizontal: 16 }}>
        <ThemedText type="title" style={{ marginBottom: 12 }}>
          {t("advocacy.lookupTitle", { defaultValue: "Find Your Representatives" })}
        </ThemedText>

        {bills.length > 0 && (
          <Menu
            visible={menuVisible}
            onDismiss={() => setMenuVisible(false)}
            anchor={
              <Button mode="outlined" onPress={() => setMenuVisible(true)} style={{ marginBottom: 12, alignSelf: "flex-start" }}>
                {selectedBill
                  ? `${selectedBill.bill_number ?? selectedBill.slug ?? selectedBill.id}`
                  : t("advocacy.selectBill", { defaultValue: "Select Bill (optional)" })}
              </Button>
            }
          >
            <Menu.Item title={t("advocacy.noneOption", { defaultValue: "None" })} onPress={() => setSelectedBill(null)} />
            {bills.map((bill) => (
              <Menu.Item
                key={String(bill.id)}
                title={`${bill.bill_number ?? bill.slug ?? bill.id} — ${bill.title}`}
                onPress={() => setSelectedBill(bill)}
              />
            ))}
          </Menu>
        )}

        <FindYourRep bill={selectedBill ?? undefined} />
      </View>
    </ThemedView>
  );
}

---
File: app/(tabs)/highlighted.tsx
---
// mobile-app/app/(tabs)/highlighted.tsx

import { useState, useEffect } from "react";
import { StyleSheet, FlatList, View } from "react-native";
import { useSafeAreaInsets } from "react-native-safe-area-context";
import { useTranslation } from "react-i18next";
import BillComponent from "../../src/components/Bill";
import BillSkeleton from "../../src/components/BillSkeleton";
import EmptyState from "../../src/components/EmptyState";
import { ThemedView } from "../../components/ThemedView";
import { ThemedText } from "../../components/ThemedText";
import { supabase } from "../../src/lib/supabase";

export default function HighlightedScreen() {
  const [bills, setBills] = useState<any[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const { t } = useTranslation();
  const insets = useSafeAreaInsets();

  useEffect(() => {
    const fetchBills = async () => {
      setLoading(true);
      try {
        let query = supabase
          .from("bills")
          .select("*")
          .eq("is_curated", true)
          .order("id", { ascending: false });

        const { data, error } = await query;
        if (error) throw error;
        setBills(data || []);
      } catch (err: any) {
        setError(err.message);
      } finally {
        setLoading(false);
      }
    };
    fetchBills();
  }, []);

  const renderContent = () => {
    if (loading) {
      return (
        <FlatList
          data={Array.from({ length: 5 })}
          renderItem={() => <BillSkeleton />}
          keyExtractor={(_, index) => `skeleton-${index}`}
          scrollEnabled={false}
        />
      );
    }
    if (error) {
      return (
        <EmptyState
          icon="chevron.left.forwardslash.chevron.right"
          title="An Error Occurred"
          message={`We couldn't fetch the bills. \n(${error})`}
        />
      );
    }
    if (bills.length === 0) {
      return (
        <EmptyState
          icon="sparkles"
          title="No Highlighted Bills"
          message="There are no curated bills at the moment. Check back later!"
        />
      );
    }
    return (
      <FlatList
        data={bills}
        keyExtractor={(item) => item.id.toString()}
        renderItem={({ item }) => <BillComponent bill={item} />}
        contentContainerStyle={{ paddingBottom: insets.bottom + 40 }}
        showsVerticalScrollIndicator={false}
      />
    );
  };

  return (
    <ThemedView style={[styles.container, { paddingTop: insets.top }]}>
      <View style={styles.header}>
        <ThemedText type="title">{t("tabs.highlighted.title", "Highlighted Bills")}</ThemedText>
      </View>
      <View style={styles.content}>{renderContent()}</View>
    </ThemedView>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
  },
  header: {
    paddingHorizontal: 16,
    paddingTop: 16,
    paddingBottom: 8,
  },
  content: {
    flex: 1,
    paddingHorizontal: 16,
  },
});

---
File: app/(tabs)/index.tsx
---
// mobile-app/app/(tabs)/index.tsx
import { useState, useEffect, useMemo } from "react";
import { StyleSheet, FlatList, View } from "react-native";
import { Searchbar } from "react-native-paper";
import { useSafeAreaInsets } from "react-native-safe-area-context";
import { useTranslation } from "react-i18next";

import BillComponent from "../../src/components/Bill";
import BillSkeleton from "../../src/components/BillSkeleton";
import EmptyState from "../../src/components/EmptyState";
import { ThemedView } from "../../components/ThemedView";
import { supabase } from "../../src/lib/supabase";

// OPTIONAL: enable feed previews in Spanish by hydrating translations.
// If you haven't added translation.ts yet, comment the next line + the useEffect that uses it.
import { fetchTranslationsForBills } from "../../src/lib/translation";

export default function BillsHomeScreen() {
  const { t, i18n } = useTranslation();
  const [bills, setBills] = useState<any[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [searchQuery, setSearchQuery] = useState<string>("");
  const insets = useSafeAreaInsets();

  // ----- Fetch bills (keeps your existing logic) -----
  useEffect(() => {
    const fetchBills = async () => {
      setLoading(true);
      try {
        let query = supabase.from("bills").select("*").order("id", { ascending: false });
        const trimmed = searchQuery.trim();
        const billNumberRegex = /^[A-Za-z]{2,3}\s*\d+$/;

        if (trimmed) {
          if (billNumberRegex.test(trimmed)) {
            const processed = trimmed.replace(/\s/g, "");
            query = query.ilike("bill_number", `%${processed}%`);
          } else {
            // full-text search on title + description
            query = query.textSearch("title,description", trimmed, { type: "websearch" });
          }
        }

        const { data, error } = await query;
        if (error) throw error;
        setBills(data || []);
      } catch (err: any) {
        setError(err.message);
      } finally {
        setLoading(false);
      }
    };

    const searchTimeout = setTimeout(fetchBills, 300); // debounce
    return () => clearTimeout(searchTimeout);
  }, [searchQuery]);

  // ----- OPTIONAL: hydrate previews with translations when language != en -----
  const idsKey = useMemo(() => bills.map((b) => b.id).join(","), [bills]);
  useEffect(() => {
    let alive = true;
    (async () => {
      if (i18n.language === "en") return;
      if (!bills.length) return;

      try {
        const map = await fetchTranslationsForBills(
          bills.map((b) => b.id),
          i18n.language,
        );
        if (!alive || !Object.keys(map).length) return;

        // Merge Spanish fields into the items so <BillComponent /> will show them.
        // (BillComponent already prefers *_es fields when language starts with 'es')
        setBills((prev) =>
          prev.map((b) => {
            const tr = map[b.id];
            if (!tr) return b;
            return {
              ...b,
              title: tr.title ?? b.title,
              description: tr.description ?? b.description,
              summary_simple_es: tr.summary_simple ?? (b as any).summary_simple_es,
              summary_medium_es: tr.summary_medium ?? (b as any).summary_medium_es,
              summary_complex_es: tr.summary_complex ?? (b as any).summary_complex_es,
              original_text_es: tr.original_text ?? (b as any).original_text_es,
            };
          }),
        );
      } catch {
        // non-fatal; feed still shows English if translation fetch fails
      }
    })();

    return () => {
      alive = false;
    };
    // Re-run when language switches or the visible set of bill IDs changes
  }, [i18n.language, idsKey]);

  const renderContent = () => {
    if (loading) {
      return (
        <FlatList
          data={Array.from({ length: 5 })}
          renderItem={() => <BillSkeleton />}
          keyExtractor={(_, index) => `skeleton-${index}`}
          scrollEnabled={false}
          contentContainerStyle={{ paddingBottom: insets.bottom + 40 }}
        />
      );
    }
    if (error) {
      return (
        <EmptyState
          icon="chevron.left.forwardslash.chevron.right"
          title={t("error.title", "An Error Occurred")}
          message={t(
            "home.error",
            `We couldn't fetch the bills. Please try again later. \n(${error})`,
          )}
        />
      );
    }
    if (bills.length === 0) {
      return (
        <EmptyState
          icon="file-search-outline"
          title={t("home.emptyTitle", "No Bills Found")}
          message={
            searchQuery
              ? t(
                  "home.emptyWithQuery",
                  `We couldn't find any bills matching "${searchQuery}". Try another search.`,
                )
              : t("home.emptyNoQuery", "There are no bills to display at the moment.")
          }
        />
      );
    }
    return (
      <FlatList
        data={bills}
        keyExtractor={(item) => item.id.toString()}
        renderItem={({ item }) => <BillComponent bill={item} />}
        contentContainerStyle={{ paddingBottom: insets.bottom + 40 }}
        showsVerticalScrollIndicator={false}
      />
    );
  };

  return (
    // NOTE: Header banner already handles safe-area. Avoid double top padding.
    <ThemedView style={styles.container}>
      <View style={styles.header}>
        {/* Removed large "Explore Bills" title */}
        <Searchbar
          placeholder={t("home.searchPlaceholder", "Search by keyword or bill...")}
          onChangeText={setSearchQuery}
          value={searchQuery}
          style={styles.searchbar}
        />
      </View>
      <View style={styles.content}>{renderContent()}</View>
    </ThemedView>
  );
}

const styles = StyleSheet.create({
  container: { flex: 1 },
  header: { paddingHorizontal: 16, paddingTop: 8, paddingBottom: 8 },
  searchbar: {},
  content: { flex: 1, paddingHorizontal: 16 },
});

---
File: app/(tabs)/language.tsx
---
// mobile-app/app/(tabs)/language.tsx
import React from "react";
import { StyleSheet, View } from "react-native";
import { useTranslation } from "react-i18next";
import { Chip, Divider } from "react-native-paper";
import { Stack } from "expo-router";
import i18n from "../../src/lib/i18n";
import { ThemedView } from "../../components/ThemedView";
import { ThemedText } from "../../components/ThemedText";

const LABELS: Record<string, string> = {
  en: "English",
  es: "Español",
  qps: "Pseudo",
};

export default function LanguageTab() {
  const { i18n: i, t } = useTranslation();

  const supported = (i.options?.supportedLngs as string[] | undefined)?.filter(
    (lng) => lng && lng !== "cimode" && lng !== "dev",
  ) || ["en"];

  return (
    <ThemedView style={styles.container}>
      <Stack.Screen
        options={{
          title: t("tabs.language", { defaultValue: "Language" }),
          headerShown: false,
        }}
      />
      <View style={styles.content}>
        <ThemedText type="title" style={{ marginBottom: 8 }}>
          {t("language.select", { defaultValue: "Select language" })}
        </ThemedText>
        <Divider />
        <View style={styles.row}>
          {supported.map((lng) => {
            const selected = i.language === lng || i.language?.startsWith(lng + "-");
            const label = LABELS[lng] ?? lng.toUpperCase();
            return (
              <Chip
                key={lng}
                selected={selected}
                onPress={() => i18n.changeLanguage(lng)}
                style={styles.chip}
              >
                {label}
              </Chip>
            );
          })}
        </View>
      </View>
    </ThemedView>
  );
}

const styles = StyleSheet.create({
  container: { flex: 1 },
  content: { flex: 1, padding: 16 },
  row: { flexDirection: "row", flexWrap: "wrap", gap: 8, marginTop: 12 },
  chip: {},
});

---
File: app/bill/[id].tsx
---
// mobile-app/app/bill/[id].tsx (hotfix: relative imports)
import { useLocalSearchParams, useRouter } from "expo-router";
import React, { useState, useEffect } from "react";
import {
  StyleSheet,
  View,
  ScrollView,
  ActivityIndicator,
  Share as RNShare,
  Linking,
  Platform,
} from "react-native";
import {
  Text,
  useTheme,
  Divider,
  Button,
  Card,
  ActivityIndicator as PaperActivityIndicator,
} from "react-native-paper";
import * as Speech from "expo-speech";
import { useSafeAreaInsets } from "react-native-safe-area-context";
import { useTranslation } from "react-i18next";
import Toast from "react-native-toast-message";

import { IconSymbol } from "../../components/ui/IconSymbol";
import HeaderBanner from "../../components/ui/HeaderBanner";

import { trackEvent } from "../../src/lib/analytics";
import { useAuth } from "../../src/providers/AuthProvider";
import { supabase } from "../../src/lib/supabase";
import { Bill } from "../../src/components/Bill";
import SummarySlider from "../../src/components/SummarySlider";
import FindYourRep from "../../src/components/FindYourRep";
import RelatedBills from "../../src/components/RelatedBills";
import EmptyState from "../../src/components/EmptyState";

type TranslatedContent = Pick<
  Bill,
  "title" | "description" | "summary_simple" | "summary_medium" | "summary_complex"
>;

export default function BillDetailsScreen() {
  const { id } = useLocalSearchParams();
  const router = useRouter();
  const { session } = useAuth();
  const { t, i18n } = useTranslation();
  const theme = useTheme();
  const insets = useSafeAreaInsets();

  const [bill, setBill] = useState<Bill | null>(null);
  const [translatedContent, setTranslatedContent] = useState<TranslatedContent | null>(null);
  const [isTranslating, setIsTranslating] = useState(false);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [activeSummaryText, setActiveSummaryText] = useState("");

  useEffect(() => {
    let isMounted = true;
    const fetchBill = async () => {
      Speech.stop();
      setLoading(true);
      try {
        const { data, error } = await supabase.from("bills").select("*").eq("id", id).single();
        if (error) throw error;
        if (!isMounted) return;
        setBill(data as Bill);
        if (data && session?.user?.id) {
          trackEvent("bill_view", session.user.id, { bill_id: data.id }).catch(() => {});
        }
      } catch (err: any) {
        if (isMounted) setError(err.message);
      } finally {
        if (isMounted) setLoading(false);
      }
    };
    fetchBill();
    return () => {
      isMounted = false;
      Speech.stop();
    };
  }, [id, session]);

  useEffect(() => {
    if (!bill) return;
    if (i18n.language === "en") {
      setTranslatedContent(null);
      return;
    }
    let isMounted = true;
    const fetchTranslation = async () => {
      setIsTranslating(true);
      Speech.stop();
      try {
        const { data, error } = await supabase.functions.invoke("translate-bill", {
          body: { bill_id: bill.id, language_code: i18n.language },
        });
        if (error) throw error;
        if (isMounted) setTranslatedContent(data as any);
      } catch (e: any) {
        console.error("Translation failed:", e.message);
      } finally {
        if (isMounted) setIsTranslating(false);
      }
    };
    fetchTranslation();
    return () => { isMounted = false; };
  }, [bill, i18n.language]);

  const handleShare = async () => {
    if (!bill) return;
    const url = bill.state_link || "";
    const text = t("bill.shareMessage", "Check out this bill: {{num}} - {{title}}.", {
      num: bill.bill_number,
      title: bill.title,
    });
    try {
      if (Platform.OS === "web") {
        const nav: any = typeof navigator !== "undefined" ? navigator : null;
        if (nav?.share) {
          await nav.share({ title: bill.bill_number, text, url });
          return;
        }
        if (nav?.clipboard?.writeText && url) {
          await nav.clipboard.writeText(url);
          Toast.show({ type: "success", text1: t("share.copied", "Link copied to clipboard") });
          return;
        }
        if (url) {
          window.open(url, "_blank", "noopener,noreferrer");
          return;
        }
        Toast.show({ type: "info", text1: t("share.nothing", "Nothing to share") });
      } else {
        await RNShare.share({ message: `${text} ${url}`.trim() });
      }
    } catch {}
  };

  const handleGoBack = () => {
    Speech.stop();
    router.back();
  };

  if (loading) {
    return (
      <View style={[styles.centeredContainer, { backgroundColor: theme.colors.background }]}>
        <ActivityIndicator size="large" />
      </View>
    );
  }

  if (error || !bill) {
    return (
      <View style={[styles.centeredContainer, { backgroundColor: theme.colors.background }]}>
        <Button
          onPress={handleGoBack}
          icon={() => <IconSymbol name="chevron.left" size={22} />}
          mode="text"
          style={{ alignSelf: "flex-start", marginBottom: 16 }}
        >
          {t("common.back", "Back")}
        </Button>
        <EmptyState
          icon="x.circle"
          title={error ? t("error.title", "An Error Occurred") : t("bill.missing", "Bill Not Found")}
          message={
            error
              ? error
              : t("bill.missingMsg", "The bill with ID #{{id}} could not be found.", { id })
          }
        />
      </View>
    );
  }

  const displayContent = (translatedContent || bill) as any;

  return (
    <View style={{ flex: 1, backgroundColor: theme.colors.background }}>
      <HeaderBanner />
      <ScrollView
        style={[styles.scrollView]}
        contentContainerStyle={{ paddingBottom: insets.bottom }}
        showsVerticalScrollIndicator={false}
        onScrollBeginDrag={() => Speech.stop()}
      >
        <View style={styles.container}>
          <Button
            onPress={handleGoBack}
            icon={() => <IconSymbol name="chevron.left" size={24} />}
            mode="text"
            style={{ alignSelf: "flex-start", marginBottom: 16 }}
          >
            {t("common.back", "Back")}
          </Button>

          <Text variant="headlineMedium" style={styles.title}>
            {bill.bill_number}
          </Text>

          {isTranslating ? (
            <View style={styles.translatingContainer}>
              <PaperActivityIndicator size="small" />
              <Text style={styles.translatingText}>{t("bill.translating", "Translating...")}</Text>
            </View>
          ) : (
            <Text variant="titleLarge" style={styles.subtitle}>
              {displayContent.title}
            </Text>
          )}

          <View style={styles.actionsContainer}>
            <Button icon="share-variant" mode="text" onPress={handleShare}>
              {t("common.share", "Share")}
            </Button>
          </View>

          {bill.panel_review && (
            <Card style={styles.reviewCard} mode="outlined">
              <Card.Title title={t("bill.panel.title", "Survivor Panel Review")} />
              <Card.Content>
                <Text variant="labelLarge" style={styles.reviewRecommendation}>
                  {t("bill.panel.recommendation", "Recommendation: {{r}}", {
                    r: bill.panel_review.recommendation,
                  })}
                </Text>
                <Text variant="bodyMedium">{bill.panel_review.comment}</Text>
              </Card.Content>
            </Card>
          )}

          <Divider style={styles.divider} />
          <FindYourRep bill={bill} />
          <Divider style={styles.divider} />
          <SummarySlider bill={{ ...bill, ...displayContent }} onSummaryChange={setActiveSummaryText} />
          <Divider style={styles.divider} />
          <RelatedBills billId={bill.id} />
        </View>
      </ScrollView>
    </View>
  );
}

const styles = StyleSheet.create({
  scrollView: { flex: 1 },
  centeredContainer: { flex: 1, justifyContent: "center", alignItems: "center", padding: 16 },
  container: { flex: 1, padding: 16, paddingBottom: 40 },
  title: { fontWeight: "bold" },
  subtitle: { marginBottom: 16 },
  actionsContainer: {
    flexDirection: "row",
    alignItems: "center",
    justifyContent: "flex-start",
    marginBottom: 8,
    marginLeft: -8,
  },
  divider: { marginVertical: 16 },
  reviewCard: { marginVertical: 8 },
  reviewRecommendation: { fontWeight: "bold", marginBottom: 8 },
  translatingContainer: { flexDirection: "row", alignItems: "center", marginBottom: 16 },
  translatingText: { marginLeft: 12, fontSize: 18, fontStyle: "italic", color: "gray" }
});

---
File: app/index.tsx
---
// mobile-app/app/index.tsx
import { useRouter } from "expo-router";
import React, { useEffect, useMemo, useRef } from "react";
import { Animated, Image, StyleSheet, View, useWindowDimensions } from "react-native";
import { useSafeAreaInsets } from "react-native-safe-area-context";

const HEADER_HEIGHT = 50;          // Final height of the header banner
const BRAND = "#078A97";           // Same brand color as your banner

export default function SplashScreen() {
  const router = useRouter();
  const insets = useSafeAreaInsets();
  const { height: screenHeight } = useWindowDimensions();

  // Start vertically centered within the safe area
  const initialPosition = useMemo(() => {
    const safeAreaHeight = screenHeight - insets.top - insets.bottom;
    return insets.top + safeAreaHeight / 2 - HEADER_HEIGHT / 2;
  }, [screenHeight, insets.top, insets.bottom]);

  const bannerPosition = useRef(new Animated.Value(initialPosition)).current;
  const hasNavigatedRef = useRef(false);

  useEffect(() => {
    // Re-center before animating if safe area / dimensions change
    bannerPosition.setValue(initialPosition);

    Animated.timing(bannerPosition, {
      toValue: insets.top,
      duration: 1200,
      useNativeDriver: true,
    }).start(() => {
      if (!hasNavigatedRef.current) {
        hasNavigatedRef.current = true;
        router.replace("/(tabs)");
      }
    });
  }, [bannerPosition, initialPosition, insets.top, router]);

  return (
    <View style={[styles.container, { backgroundColor: BRAND }]}>
      <Animated.View
        style={{
          position: "absolute",
          top: 0,
          left: 0,
          right: 0,
          transform: [{ translateY: bannerPosition }],
        }}
      >
        <Image
          // Keep your original splash asset; change to header-banner.png here if you prefer
          source={require("../assets/images/banner.png")}
          style={styles.banner}           // no tint — preserves the asset’s native colors
          resizeMode="contain"
        />
      </Animated.View>
    </View>
  );
}

const styles = StyleSheet.create({
  container: { flex: 1 },            // backgroundColor set inline above
  banner: { width: "100%", height: HEADER_HEIGHT },
});

---
File: app/+not-found.tsx
---
// mobile-app/app/+not-found.tsx
import { Link, Stack } from "expo-router";
import { StyleSheet } from "react-native";
import { useTranslation } from "react-i18next";

import { ThemedText } from "~/components/ThemedText";
import { ThemedView } from "~/components/ThemedView";

export default function NotFoundScreen() {
  const { t } = useTranslation();

  return (
    <>
      <Stack.Screen options={{ title: t("notFound.oopsTitle", "Oops!") }} />
      <ThemedView style={styles.container}>
        <ThemedText type="title">{t("notFound.title", "This screen does not exist.")}</ThemedText>
        <Link href="/" style={styles.link}>
          <ThemedText type="link">{t("notFound.homeCta", "Go to home screen!")}</ThemedText>
        </Link>
      </ThemedView>
    </>
  );
}

const styles = StyleSheet.create({
  container: { flex: 1, alignItems: "center", justifyContent: "center", padding: 20 },
  link: { marginTop: 15, paddingVertical: 15 },
});

---
File: app/_layout.tsx
---
// mobile-app/app/_layout.tsx
// Root layout sets up providers and the navigation stack.  The global
// header/banner is intentionally omitted here so the splash screen can
// animate without a second banner underneath.

import "react-native-reanimated";
import React, { useEffect, useState } from "react";
import { View, Text, StyleSheet } from "react-native";
import { Stack } from "expo-router";
import * as SplashScreen from "expo-splash-screen";
import { StatusBar } from "expo-status-bar";
import { GestureHandlerRootView } from "react-native-gesture-handler";
import { SafeAreaProvider } from "react-native-safe-area-context";
import { Provider as PaperProvider, MD3LightTheme, MD3DarkTheme } from "react-native-paper";
import Toast from "react-native-toast-message";
import { useFonts } from "expo-font";
import i18next from "i18next";

import "../src/lib/i18n";
import { useColorScheme } from "../hooks/useColorScheme";
import { AuthProvider } from "../src/providers/AuthProvider";
import { initConfig } from "../src/lib/config";
import { LanguageProvider } from "../src/providers/LanguageProvider";
import { QueryClient, QueryClientProvider } from "@tanstack/react-query";
const queryClient = new QueryClient();

const BRAND = "#078A97" as const;

// Prevent splash auto-hide until assets/config load.
SplashScreen.preventAutoHideAsync().catch(() => {});

export default function RootLayout() {
  const [fontsLoaded, fontError] = useFonts({
    "SpaceMono-Regular": require("../assets/fonts/SpaceMono-Regular.ttf"),
  });
  const [configError, setConfigError] = useState<string | null>(null);
  const colorScheme = useColorScheme();

  // Initialize runtime config on mount.
  useEffect(() => {
    try {
      initConfig();
    } catch (e: any) {
      setConfigError(e?.message ?? "Unknown configuration error");
    }
  }, []);

  // Hide splash when fonts and config are ready.
  useEffect(() => {
    if (fontsLoaded || fontError || configError) {
      SplashScreen.hideAsync().catch(() => {});
    }
  }, [fontsLoaded, fontError, configError]);

  // If config failed, show a minimal error screen.
  if (configError) {
    const t = (k: string, d: string) => i18next.t(k, d);
    return (
      <View style={styles.errorContainer}>
        <Text style={styles.errorTitle}>{t("config.errorTitle", "Configuration Error")}</Text>
        <Text style={styles.errorBody}>{configError}</Text>
        <Text style={styles.errorHint}>
          {t("config.errorHint", "Check your mobile-app/.env and restart the dev server.")}
        </Text>
      </View>
    );
  }

  if (!fontsLoaded && !fontError) return null;
  if (fontError) console.error("Font loading error:", fontError);

  // Theme overrides for MD3.
  const Light = {
    ...MD3LightTheme,
    colors: {
      ...MD3LightTheme.colors,
      primary: BRAND,
      surfaceTint: BRAND,
    },
  };
  const Dark = {
    ...MD3DarkTheme,
    colors: {
      ...MD3DarkTheme.colors,
      primary: BRAND,
      surfaceTint: BRAND,
    },
  };
  const theme = colorScheme === "dark" ? Dark : Light;

  return (
    <GestureHandlerRootView style={{ flex: 1 }}>
      <SafeAreaProvider>
        <PaperProvider theme={theme}>
          <QueryClientProvider client={queryClient}>
            <LanguageProvider>
              <AuthProvider>
                <StatusBar style={colorScheme === "dark" ? "light" : "dark"} />
                <Stack>
                  <Stack.Screen name="index" options={{ headerShown: false }} />
                  <Stack.Screen name="bill/[id]" options={{ headerShown: false }} />
                  <Stack.Screen name="(tabs)" options={{ headerShown: false }} />
                </Stack>
                <Toast />
              </AuthProvider>
            </LanguageProvider>
          </QueryClientProvider>
        </PaperProvider>
      </SafeAreaProvider>
    </GestureHandlerRootView>
  );
}

const styles = StyleSheet.create({
  errorContainer: {
    flex: 1,
    padding: 24,
    paddingTop: 64,
    backgroundColor: "#fff",
    justifyContent: "flex-start",
  },
  errorTitle: {
    fontSize: 20,
    fontWeight: "700",
    marginBottom: 12,
  },
  errorBody: {
    fontSize: 14,
    lineHeight: 20,
    color: "#333",
  },
  errorHint: {
    marginTop: 16,
    fontSize: 12,
    color: "#666",
  },
});

---
File: ../supabase/schema.sql
---
-- =================================================================
-- AI ADVOCATE: V1 STABLE SCHEMA (MERGED & COMPLETE - V2)
-- This script is idempotent and contains the complete schema for the
-- V1 stable build, including all tables, functions, and extensions for
-- all features implemented.
-- =================================================================

-- SECTION 1: EXTENSIONS
CREATE EXTENSION IF NOT EXISTS supabase_vault;
CREATE EXTENSION IF NOT EXISTS pg_cron;
CREATE EXTENSION IF NOT EXISTS http;
CREATE EXTENSION IF NOT EXISTS vector; -- For semantic search

-- SECTION 2: CORE TABLES
CREATE TABLE IF NOT EXISTS public.bills (
  id BIGINT PRIMARY KEY, bill_number TEXT NOT NULL, title TEXT NOT NULL, description TEXT,
  status TEXT, state_link TEXT, summary_simple TEXT, summary_medium TEXT, summary_complex TEXT,
  panel_review JSONB, is_verified BOOLEAN DEFAULT FALSE, created_at TIMESTAMPTZ DEFAULT NOW(),
  change_hash TEXT, is_curated BOOLEAN DEFAULT FALSE, original_text TEXT,
  embedding vector(1536) -- For semantic search
);
CREATE TABLE IF NOT EXISTS public.profiles (id UUID PRIMARY KEY REFERENCES auth.users(id) ON DELETE CASCADE);
CREATE TABLE IF NOT EXISTS public.legislators (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, name TEXT NOT NULL, party TEXT,
  district TEXT, is_lnf_ally BOOLEAN DEFAULT FALSE, created_at TIMESTAMPTZ DEFAULT NOW(),
  chamber TEXT, photo_url TEXT, email TEXT
);
CREATE TABLE IF NOT EXISTS public.votes (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  bill_id BIGINT NOT NULL REFERENCES public.bills(id) ON DELETE CASCADE,
  legislator_id BIGINT NOT NULL REFERENCES public.legislators(id) ON DELETE CASCADE,
  vote TEXT NOT NULL, created_at TIMESTAMPTZ DEFAULT NOW(), UNIQUE(bill_id, legislator_id)
);

-- SECTION 3: USER INTERACTION TABLES
CREATE TABLE IF NOT EXISTS public.reactions (
  bill_id BIGINT NOT NULL REFERENCES public.bills(id) ON DELETE CASCADE,
  user_id UUID NOT NULL REFERENCES public.profiles(id) ON DELETE CASCADE,
  reaction_type TEXT NOT NULL, created_at TIMESTAMPTZ DEFAULT NOW(), PRIMARY KEY (bill_id, user_id)
);
CREATE TABLE IF NOT EXISTS public.bookmarks (
  bill_id BIGINT NOT NULL REFERENCES public.bills(id) ON DELETE CASCADE,
  user_id UUID NOT NULL REFERENCES public.profiles(id) ON DELETE CASCADE,
  created_at TIMESTAMPTZ DEFAULT NOW(), PRIMARY KEY (bill_id, user_id)
);
CREATE TABLE IF NOT EXISTS public.bill_translations (
  bill_id BIGINT NOT NULL REFERENCES public.bills(id) ON DELETE CASCADE,
  language_code TEXT NOT NULL, title TEXT, description TEXT, summary_simple TEXT,
  summary_medium TEXT, summary_complex TEXT, created_at TIMESTAMPTZ DEFAULT NOW(),
  PRIMARY KEY (bill_id, language_code)
);

-- SECTION 4: NOTIFICATIONS & ANALYTICS TABLES
CREATE TABLE IF NOT EXISTS public.user_push_tokens (
  user_id UUID PRIMARY KEY REFERENCES auth.users(id) ON DELETE CASCADE,
  expo_token TEXT NOT NULL, updated_at TIMESTAMPTZ DEFAULT NOW()
);
CREATE TABLE IF NOT EXISTS public.subscriptions (
  user_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
  bill_id BIGINT NOT NULL REFERENCES public.bills(id) ON DELETE CASCADE,
  type TEXT NOT NULL CHECK (type IN ('saved', 'upvoted')), created_at TIMESTAMPTZ DEFAULT NOW(),
  PRIMARY KEY (user_id, bill_id)
);
CREATE TABLE IF NOT EXISTS public.events (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, ts TIMESTAMPTZ DEFAULT NOW(),
  user_id UUID, type TEXT NOT NULL, bill_id BIGINT
);

-- SECTION 5: INFRASTRUCTURE TABLES
CREATE TABLE IF NOT EXISTS public.cron_job_errors (
  id BIGINT GENERATED ALWAYS AS IDENTITY PRIMARY KEY, job_name TEXT NOT NULL,
  error_message TEXT NOT NULL, occurred_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- SECTION 6: INDEXES
CREATE INDEX IF NOT EXISTS idx_bills_change_hash ON public.bills(change_hash);
CREATE INDEX IF NOT EXISTS idx_bills_bill_number ON public.bills(bill_number);
CREATE INDEX IF NOT EXISTS idx_bills_embed ON public.bills USING ivfflat (embedding vector_cosine_ops) WITH (lists = 100);
CREATE INDEX IF NOT EXISTS idx_cron_job_errors_occurred_at ON public.cron_job_errors (occurred_at);

-- SECTION 7: DATABASE FUNCTIONS (RPCs) & TRIGGERS
CREATE OR REPLACE FUNCTION public.handle_new_user() RETURNS TRIGGER AS $$ BEGIN INSERT INTO public.profiles (id) VALUES (new.id); RETURN new; END; $$ LANGUAGE plpgsql SECURITY DEFINER;
DROP TRIGGER IF EXISTS on_auth_user_created ON auth.users;
CREATE TRIGGER on_auth_user_created AFTER INSERT ON auth.users FOR EACH ROW EXECUTE PROCEDURE public.handle_new_user();

CREATE OR REPLACE FUNCTION public.cleanup_old_cron_job_errors() RETURNS VOID AS $$ BEGIN DELETE FROM public.cron_job_errors WHERE occurred_at < NOW() - INTERVAL '30 days'; END; $$ LANGUAGE plpgsql SECURITY DEFINER;
CREATE OR REPLACE FUNCTION public.invoke_sync_updated_bills() RETURNS VOID AS $$ DECLARE status_code INT; anon_key TEXT; BEGIN anon_key := vault.get_secret('supabase_anon_key'); SELECT status INTO status_code FROM net.http_post( url:='https://klpwiiszmzzfvlbfsjrd.supabase.co/functions/v1/sync-updated-bills', headers:='{"Content-Type": "application/json", "apikey": "' || anon_key || '"}'); IF status_code != 200 THEN INSERT INTO public.cron_job_errors (job_name, error_message) VALUES ('daily-bill-sync', 'Invoke Error: Edge Function returned status ' || status_code); END IF; END; $$ LANGUAGE plpgsql SECURITY DEFINER;

CREATE OR REPLACE FUNCTION public.get_bill_details_for_user(p_bill_id BIGINT, p_user_id UUID) RETURNS JSONB AS $$ DECLARE bill_details JSONB; reaction_counts JSONB; user_reaction_type TEXT; is_bookmarked BOOLEAN; BEGIN SELECT to_jsonb(b) INTO bill_details FROM public.bills b WHERE b.id = p_bill_id; SELECT jsonb_object_agg(reaction_type, count) INTO reaction_counts FROM (SELECT reaction_type, COUNT(*) AS count FROM public.reactions WHERE bill_id = p_bill_id GROUP BY reaction_type) AS counts; SELECT reaction_type INTO user_reaction_type FROM public.reactions WHERE bill_id = p_bill_id AND user_id = p_user_id; SELECT EXISTS (SELECT 1 FROM public.bookmarks WHERE bill_id = p_bill_id AND user_id = p_user_id) INTO is_bookmarked; RETURN jsonb_build_object('bill', bill_details, 'reaction_counts', COALESCE(reaction_counts, '{}'::jsonb), 'user_reaction', user_reaction_type, 'is_bookmarked', is_bookmarked); END; $$ LANGUAGE plpgsql STABLE;
CREATE OR REPLACE FUNCTION public.handle_reaction(p_bill_id BIGINT, p_user_id UUID, p_reaction_type TEXT) RETURNS void AS $$ DECLARE existing_reaction TEXT; BEGIN SELECT reaction_type INTO existing_reaction FROM public.reactions WHERE user_id = p_user_id AND bill_id = p_bill_id; IF FOUND THEN IF existing_reaction = p_reaction_type THEN DELETE FROM public.reactions WHERE user_id = p_user_id AND bill_id = p_bill_id; ELSE UPDATE public.reactions SET reaction_type = p_reaction_type, created_at = NOW() WHERE user_id = p_user_id AND bill_id = p_bill_id; END IF; ELSE INSERT INTO public.reactions (user_id, bill_id, reaction_type) VALUES (p_user_id, p_bill_id, p_reaction_type); END IF; END; $$ LANGUAGE plpgsql;
CREATE OR REPLACE FUNCTION public.toggle_bookmark_and_subscription(p_bill_id BIGINT, p_user_id UUID) RETURNS void AS $$ DECLARE bookmark_exists BOOLEAN; BEGIN SELECT EXISTS (SELECT 1 FROM public.bookmarks WHERE user_id = p_user_id AND bill_id = p_bill_id) INTO bookmark_exists; IF bookmark_exists THEN DELETE FROM public.bookmarks WHERE user_id = p_user_id AND bill_id = p_bill_id; DELETE FROM public.subscriptions WHERE user_id = p_user_id AND bill_id = p_bill_id; ELSE INSERT INTO public.bookmarks (user_id, bill_id) VALUES (p_user_id, p_bill_id); INSERT INTO public.subscriptions (user_id, bill_id, type) VALUES (p_user_id, p_bill_id, 'saved') ON CONFLICT (user_id, bill_id) DO NOTHING; END IF; END; $$ LANGUAGE plpgsql;
CREATE OR REPLACE FUNCTION public.get_related_bills(p_bill_id BIGINT) RETURNS TABLE (id BIGINT, bill_number TEXT, title TEXT, similarity FLOAT) LANGUAGE plpgsql AS $$ BEGIN RETURN QUERY WITH source_bill AS (SELECT embedding FROM public.bills WHERE bills.id = p_bill_id) SELECT b.id, b.bill_number, b.title, (1 - (b.embedding <=> (SELECT embedding FROM source_bill)))::FLOAT AS similarity FROM public.bills b, source_bill WHERE b.id <> p_bill_id AND b.embedding IS NOT NULL ORDER BY b.embedding <=> (SELECT embedding FROM source_bill) LIMIT 5; END; $$;

-- SECTION 8: ROW-LEVEL SECURITY (RLS) POLICIES
ALTER TABLE public.bills ENABLE ROW LEVEL SECURITY; DROP POLICY IF EXISTS "Public can view bills" ON public.bills; CREATE POLICY "Public can view bills" ON public.bills FOR SELECT USING (true);
ALTER TABLE public.profiles ENABLE ROW LEVEL SECURITY; DROP POLICY IF EXISTS "Public can view profiles" ON public.profiles; CREATE POLICY "Public can view profiles" ON public.profiles FOR SELECT USING (true);
ALTER TABLE public.reactions ENABLE ROW LEVEL SECURITY; DROP POLICY IF EXISTS "Public can view reactions" ON public.reactions; CREATE POLICY "Public can view reactions" ON public.reactions FOR SELECT USING (true); DROP POLICY IF EXISTS "Users can manage their own reactions" ON public.reactions; CREATE POLICY "Users can manage their own reactions" ON public.reactions FOR ALL USING (auth.uid() = user_id);
ALTER TABLE public.bookmarks ENABLE ROW LEVEL SECURITY; DROP POLICY IF EXISTS "Users can manage their own bookmarks" ON public.bookmarks; CREATE POLICY "Users can manage their own bookmarks" ON public.bookmarks FOR ALL USING (auth.uid() = user_id);
ALTER TABLE public.legislators ENABLE ROW LEVEL SECURITY; DROP POLICY IF EXISTS "Public can view legislators" ON public.legislators; CREATE POLICY "Public can view legislators" ON public.legislators FOR SELECT USING (true);
ALTER TABLE public.votes ENABLE ROW LEVEL SECURITY; DROP POLICY IF EXISTS "Public can view votes" ON public.votes; CREATE POLICY "Public can view votes" ON public.votes FOR SELECT USING (true);
ALTER TABLE public.bill_translations ENABLE ROW LEVEL SECURITY; DROP POLICY IF EXISTS "Public can view translations" ON public.bill_translations; CREATE POLICY "Public can view translations" ON public.bill_translations FOR SELECT USING (true); DROP POLICY IF EXISTS "Service role can manage translations" ON public.bill_translations; CREATE POLICY "Service role can manage translations" ON public.bill_translations FOR ALL USING (auth.role() = 'service_role');
ALTER TABLE public.user_push_tokens ENABLE ROW LEVEL SECURITY; DROP POLICY IF EXISTS "Users can manage their own push token" ON public.user_push_tokens; CREATE POLICY "Users can manage their own push token" ON public.user_push_tokens FOR ALL USING (auth.uid() = user_id);
ALTER TABLE public.subscriptions ENABLE ROW LEVEL SECURITY; DROP POLICY IF EXISTS "Users can manage their own subscriptions" ON public.subscriptions; CREATE POLICY "Users can manage their own subscriptions" ON public.subscriptions FOR ALL USING (auth.uid() = user_id);
ALTER TABLE public.events ENABLE ROW LEVEL SECURITY; DROP POLICY IF EXISTS "Allow service role to insert events" ON public.events; CREATE POLICY "Allow service role to insert events" ON public.events FOR INSERT WITH CHECK (auth.role() = 'service_role');
ALTER TABLE public.cron_job_errors ENABLE ROW LEVEL SECURITY; DROP POLICY IF EXISTS "Admins can view errors" ON public.cron_job_errors; CREATE POLICY "Admins can view errors" ON public.cron_job_errors FOR SELECT USING (auth.role() = 'service_role');

-- SECTION 9: CRON JOBS
SELECT cron.schedule('daily-bill-sync', '0 10 * * *', 'SELECT public.invoke_sync_updated_bills()');
SELECT cron.schedule('cleanup-cron-job-errors', '0 0 * * 0', 'SELECT public.cleanup_old_cron_job_errors()');

-- SECTION 10: COMMENTS
COMMENT ON TABLE public.bills IS 'Stores core legislative bill information and AI-generated content.';
COMMENT ON COLUMN public.bills.embedding IS 'Stores vector embeddings for semantic search.';
COMMENT ON TABLE public.bill_translations IS 'Caches AI-generated translations of bill content for various languages.';
COMMENT ON TABLE public.user_push_tokens IS 'Stores Expo push notification tokens for each user.';
COMMENT ON TABLE public.subscriptions IS 'Tracks user subscriptions to bills for targeted notifications.';
COMMENT ON TABLE public.events IS 'Stores anonymous analytics events for understanding app usage.';
COMMENT ON FUNCTION public.get_related_bills(BIGINT) IS 'Returns top 5 semantically similar bills using vector embeddings.';
COMMENT ON FUNCTION public.toggle_bookmark_and_subscription(BIGINT, UUID) IS 'Atomically handles bookmarking/unbookmarking and subscribing/unsubscribing.';
---
File: ../supabase/.temp/cli-latest
---
v2.34.3
---
File: ../supabase/.temp/postgres-version
---
17.4.1.45
---
File: ../supabase/.temp/pooler-url
---
postgresql://postgres.klpwiiszmzzfvlbfsjrd:[YOUR-PASSWORD]@aws-0-us-west-1.pooler.supabase.com:6543/postgres
---
File: ../supabase/.temp/gotrue-version
---
v2.176.1
---
File: ../supabase/.temp/rest-version
---
v12.2.3
---
File: ../supabase/.temp/storage-version
---
custom-metadata
---
File: ../supabase/.temp/project-ref
---
klpwiiszmzzfvlbfsjrd
---
File: ../supabase/functions/ingest-and-summarize/index.ts
---
import { createClient } from "@supabase/supabase-js";
import { serve } from "https://deno.land/std@0.177.0/http/server.ts";
import { corsHeaders } from "../_shared/cors.ts";
import { MOCK_BILL_DATA, MOCK_SUMMARIES } from "../_shared/mock-data.ts";

console.log(`🚀 Function 'ingest-and-summarize' up and running!`);

serve(async (req) => {
  if (req.method === "OPTIONS") {
    return new Response("ok", { headers: corsHeaders });
  }

  try {
    const serviceRoleKey = Deno.env.get("SUPABASE_SERVICE_ROLE_KEY")!;
    const supabaseUrl = Deno.env.get("SUPABASE_URL")!;
    const supabaseAdmin = createClient(supabaseUrl, serviceRoleKey);

    const { billId } = await req.json();
    if (!billId) throw new Error("Missing 'billId'");

    console.log("--- MOCK MODE ENABLED ---");
    const billData = MOCK_BILL_DATA;
    const summaries = MOCK_SUMMARIES;
    console.log(`✅ Using mock bill data for bill #${billId}`);
    
    const { data: savedBill, error: dbError } = await supabaseAdmin
      .from("bills")
      .upsert({
        id: billData.bill_id,
        bill_number: billData.bill_number,
        title: billData.title,
        description: billData.description,
        status: String(billData.status),
        state_link: billData.state_link,
        summary_simple: summaries.summary_simple,
        summary_medium: summaries.summary_medium,
        summary_complex: summaries.summary_complex,
      })
      .select()
      .single();
      
    if (dbError) throw dbError;
    console.log(`✅ Successfully saved bill to database!`);
    
    return new Response(JSON.stringify(savedBill), {
      headers: { ...corsHeaders, "Content-Type": "application/json" },
      status: 200,
    });
  } catch (error) {
    console.error(error);
    return new Response(JSON.stringify({ error: error.message }), {
      headers: { ...corsHeaders, "Content-Type": "application/json" },
      status: 500,
    });
  }
});
---
File: ../supabase/functions/ingest-and-summarize/deno.json
---
{
  "imports": {
    "@supabase/supabase-js": "npm:@supabase/supabase-js@2"
  }
}
---
File: ../supabase/functions/ingest-and-summarize/.npmrc
---
# Configuration for private npm package dependencies
# For more information on using private registries with Edge Functions, see:
# https://supabase.com/docs/guides/functions/import-maps#importing-from-private-registries

---
File: ../supabase/functions/_shared/cors.ts
---
export const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

// // This is a simple CORS preflight handler.
// export function handleCors(req: Request): Response {
//  if (req.method === 'OPTIONS') {
//    return new Response('ok', { headers: corsHeaders })
//  }
//  
//  // If it's not an OPTIONS request, just return an empty response.
//  return new Response(null, { headers: corsHeaders })
// }
---
File: ../supabase/functions/_shared/mock-data.ts
---
// This file contains mock (fake) data to use for testing
// in lieu of access to the real API keys.

export const MOCK_BILL_DATA = {
  bill_id: 1702794,
  title: "Human trafficking: victim rights.",
  bill_number: "SB376",
  description: "An act to add Section 236.21 to the Penal Code, relating to human trafficking.",
  status: 4,
  state_link: "https://leginfo.legislature.ca.gov/faces/billStatusClient.xhtml?bill_id=202320240SB376"
};

export const MOCK_SUMMARIES = {
  summary_simple: "This bill helps people hurt by human trafficking. It lets them have a support person with them when talking to police or lawyers.",
  summary_medium: "Senate Bill 376 gives rights to victims of human trafficking. It allows them to have an advocate and a support person present during interviews with law enforcement or attorneys.",
  summary_complex: "Senate Bill 376 amends the Penal Code to enhance protections for victims of human trafficking by granting them the right to have a human trafficking advocate and a support person present during interviews conducted by law enforcement or defense attorneys."
};
---
File: ../supabase/functions/verify-app-check/index.ts
---
import { serve } from "https://deno.land/std@0.177.0/http/server.ts";

const corsHeaders = {
  "Access-Control-Allow-Origin": "*",
  "Access-Control-Allow-Headers": "authorization, x-client-info, apikey, content-type",
};

console.log("🚀 verify-app-check function running (INSECURE DEBUG MODE) 🚀");

serve(async (req) => {
  // Handle CORS preflight requests
  if (req.method === "OPTIONS") {
    return new Response("ok", { headers: corsHeaders });
  }

  try {
    const body = await req.json();
    console.log("Received request to verify app. Body:", body);
    
    // --- BYPASSING ALL VERIFICATION ---
    // In this debug mode, we automatically return success.
    console.log("Bypassing token verification and returning success.");

    return new Response(JSON.stringify({ success: true, message: "Verification bypassed for development." }), {
      headers: { ...corsHeaders, "Content-Type": "application/json" },
      status: 200,
    });
  } catch (error) {
    console.error("Error in verify-app-check function:", error.message);
    return new Response(JSON.stringify({ error: error.message }), {
      headers: { ...corsHeaders, "Content-Type": "application/json" },
      status: 400,
    });
  }
});
---
File: ../supabase/functions/verify-app-check/deno.json
---
{
  "imports": {
    "firebase-admin/app": "npm:firebase-admin@11.0.1/app",
    "firebase-admin/app-check": "npm:firebase-admin@11.0.1/app-check",
    "std/": "https://deno.land/std@0.177.0/"
  }
}
---
File: ../supabase/functions/bulk-import-dataset/index.ts
---
// supabase/functions/bulk-import-dataset/index.ts

import { serve } from "https://deno.land/std@0.177.0/http/server.ts";
import { createClient } from "npm:@supabase/supabase-js@2";
import JSZip from "npm:jszip";

// --- Configuration ---
const corsHeaders = {
  "Access-Control-Allow-Origin": "*",
  "Access-Control-Allow-Headers": "authorization, x-client-info, apikey, content-type",
};
const BROWSER_HEADERS = {
    'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7',
    'Accept-Language': 'en-US,en;q=0.9',
    'Connection': 'keep-alive',
    'Host': 'api.legiscan.com',
    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
};
const RELEVANT_KEYWORDS = [
  'trafficking', 'human trafficking', 'human trafficker', 'trafficked',
  'victim', 'survivor', 'abuse', 'coercion', 'assault',
  'domestic violence', 'sexual violence', 'sex work',
  'sex worker', 'prostitution', 'solicitation'
];
const KEYWORD_REGEX = new RegExp(`\\b(${RELEVANT_KEYWORDS.join('|')})\\b`, 'i');

console.log("🚀 Initializing bulk-import-dataset v37 (Correct Seeding Logic)");

serve(async (req) => {
  if (req.method === "OPTIONS") return new Response("ok", { headers: corsHeaders });

  try {
    const legiscanApiKey = Deno.env.get("LEGISCAN_API_KEY");
    if (!legiscanApiKey) throw new Error("LEGISCAN_API_KEY is not set.");
    
    // Step 1: Get active session
    const datasetListUrl = `https://api.legiscan.com/?key=${legiscanApiKey}&op=getDatasetList&state=CA`;
    const datasetListResponse = await fetch(datasetListUrl, { headers: BROWSER_HEADERS });
    const datasetListJson = await datasetListResponse.json();
    if (datasetListJson.status !== "OK") throw new Error("Failed to get dataset list.");
    const activeDataset = datasetListJson.datasetlist.find(d => d.prior === 0);
    if (!activeDataset) throw new Error("Could not find an active session.");
    
    // Step 2: Fetch dataset ZIP
    const { session_id, access_key } = activeDataset;
    console.log(`Found active session: ${activeDataset.session_title}. Fetching dataset...`);
    const legiscanUrl = `https://api.legiscan.com/?op=getDataset&id=${session_id}&key=${legiscanApiKey}&access_key=${access_key}`;
    const legiscanResponse = await fetch(legiscanUrl, { headers: BROWSER_HEADERS });
    const { dataset } = await legiscanResponse.json();
    if (!dataset?.zip) throw new Error("No 'dataset.zip' property found.");
    
    // Step 3: Process bill metadata from ZIP
    console.log("✅ Dataset received! Seeding database with bill metadata...");
    const supabaseAdmin = createClient(Deno.env.get("SUPABASE_URL")!, Deno.env.get("SUPABASE_SERVICE_ROLE_KEY")!);
    const zip = await new JSZip().loadAsync(dataset.zip, { base64: true });
    
    const billsToUpsert = [];
    for (const file of Object.values(zip.files)) {
      if (file.name.includes('/bill/') && !file.dir) {
        try {
          const billJsonText = await file.async("text");
          const { bill: billData } = JSON.parse(billJsonText);

          if (KEYWORD_REGEX.test(billData.title)) {
            // We only insert the metadata. The text and summaries will be filled by the worker.
            billsToUpsert.push({
                id: billData.bill_id,
                bill_number: billData.bill_number,
                title: billData.title,
                description: billData.description,
                status: String(billData.status),
                state_link: billData.state_link,
                change_hash: billData.change_hash,
                summary_simple: `Placeholder for ${billData.bill_number}.`, // Mark for processing
            });
          }
        } catch (e) { console.error(`Skipping file due to error: ${file.name}`, e); }
      }
    }
    
    if (billsToUpsert.length === 0) {
      return new Response(JSON.stringify({ message: "No new bills matching keywords found." }), {
        headers: { "Content-Type": "application/json" }, status: 200,
      });
    }

    // --- STEP 4: Save to database ---
    console.log(`✅ Found ${billsToUpsert.length} relevant bills. Seeding database...`);
    const CHUNK_SIZE = 500;
    for (let i = 0; i < billsToUpsert.length; i += CHUNK_SIZE) {
      const chunk = billsToUpsert.slice(i, i + CHUNK_SIZE);
      console.log(`Importing chunk ${Math.floor(i / CHUNK_SIZE) + 1}...`);
      const { error } = await supabaseAdmin.from("bills").upsert(chunk, { onConflict: "id" });
      if (error) throw error;
    }

    console.log("✅🎉 VICTORY! Successfully seeded database with all relevant bill metadata!");
    return new Response(JSON.stringify({ message: `Successfully seeded ${billsToUpsert.length} bills.` }), {
      headers: { "Content-Type": "application/json" }, status: 200,
    });

  } catch (error) {
    console.error("Function failed:", error.message, error.stack);
    return new Response(JSON.stringify({ error: error.message }), {
        headers: { "Content-Type": "application/json" }, status: 500,
    });
  }
});
---
File: ../supabase/functions/bulk-import-dataset/deno.json
---
{
  "imports": {
    "@supabase/supabase-js": "npm:@supabase/supabase-js@2"
  }
}
---
File: ../supabase/functions/sync-updated-bills/index.ts
---
// supabase/functions/sync-updated-bills/index.ts
// VERSION 2.2: Added Vector Embedding Generation

import { serve } from "https://deno.land/std@0.177.0/http/server.ts";
import { createClient } from "npm:@supabase/supabase-js@2";
import { GoogleGenerativeAI } from "npm:@google/generative-ai";
import { DOMParser } from "https://deno.land/x/deno_dom/deno-dom-wasm.ts";

// --- Configuration ---
const corsHeaders = {
  "Access-Control-Allow-Origin": "*",
  "Access-Control-Allow-Headers": "authorization, x-client-info, apikey, content-type",
};
const BROWSER_HEADERS = {
    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
};

console.log("🚀 Initializing sync-updated-bills v2.2 (Embeddings)");

function cleanText(rawText: string): string {
    if (!rawText) return '';
    let cleanedText = rawText;
    if (cleanedText.trim().startsWith('<')) {
        try {
            const dom = new DOMParser().parseFromString(cleanedText, "text/html");
            cleanedText = dom?.body.textContent ?? '';
        } catch (e) { console.error("DOMParser failed, falling back to raw text cleaning.", e); }
    }
    cleanedText = cleanedText
      .replace(/ /g, ' ')
      .replace(/Â/g, '')
      .replace(/\uFFFD/g, '')
      .replace(/\s\s+/g, ' ')
      .trim();
    return cleanedText;
}

// --- Main Server Logic ---
serve(async (req) => {
  if (req.method === "OPTIONS") return new Response("ok", { headers: corsHeaders });

  try {
    // --- API and Client Initialization ---
    const legiscanApiKey = Deno.env.get("LEGISCAN_API_KEY");
    const geminiApiKey = Deno.env.get("GEMINI_API_KEY");
    if (!legiscanApiKey || !geminiApiKey) {
      throw new Error("API keys (LEGISCAN_API_KEY, GEMINI_API_KEY) are not set.");
    }

    const supabaseAdmin = createClient(Deno.env.get("SUPABASE_URL")!, Deno.env.get("SUPABASE_SERVICE_ROLE_KEY")!);
    const genAI = new GoogleGenerativeAI(geminiApiKey);
    
    const generativeModel = genAI.getGenerativeModel({ 
      model: "gemini-1.5-flash-latest",
      generationConfig: { responseMimeType: "application/json" },
    });
    const embeddingModel = genAI.getGenerativeModel({ model: "embedding-001" });

    // --- Find a Bill to Process ---
    const { data: billToProcess, error: findBillError } = await supabaseAdmin
        .from("bills").select("id").or('summary_simple.ilike.Placeholder for%,summary_simple.ilike.AI_SUMMARY_FAILED%').limit(1).single();

    if (findBillError) {
        if (findBillError.code === 'PGRST116') {
            return new Response(JSON.stringify({ message: "Sync complete. All bills are up-to-date." }), { headers: corsHeaders });
        }
        throw findBillError;
    }

    const billId = billToProcess.id;
    console.log(`Processing bill ID: ${billId}...`);

    // --- Fetch and Clean Bill Text from LegiScan ---
    const billDetailsUrl = `https://api.legiscan.com/?op=getBill&id=${billId}&key=${legiscanApiKey}`;
    const billDetailsRes = await fetch(billDetailsUrl, { headers: BROWSER_HEADERS });
    const { bill: billData } = await billDetailsRes.json();
    
    let rawTextForCleaning;
    const latestTextDoc = billData.texts?.length > 0 ? billData.texts[billData.texts.length - 1] : null;

    if (latestTextDoc?.doc_id) {
        const billTextUrl = `https://api.legiscan.com/?op=getBillText&id=${latestTextDoc.doc_id}&key=${legiscanApiKey}`;
        const billTextRes = await fetch(billTextUrl, { headers: BROWSER_HEADERS });
        const { text: textData } = await billTextRes.json();
        const binaryString = atob(textData.doc);
        const bytes = Uint8Array.from(binaryString, c => c.charCodeAt(0));
        const decoder = new TextDecoder('utf-8', { fatal: false });
        rawTextForCleaning = decoder.decode(bytes);
    } else {
        console.log(`- Bill ${billData.bill_number} has no text document. Using title as fallback.`);
        rawTextForCleaning = billData.title;
    }

    const originalText = cleanText(rawTextForCleaning);

    if (!originalText) {
        await supabaseAdmin.from("bills").update({ summary_simple: "No text available." }).eq('id', billId);
        return new Response(JSON.stringify({ message: `Skipped bill ${billId} (no text found).` }), { headers: corsHeaders });
    }

    // --- Step 1: Generate 3-Tier Summaries ---
    console.log(`- Generating 3-tier verbose summary for ${billData.bill_number}...`);
    const summaryPrompt = `
      Analyze the following legislative text and return a JSON object with three summaries.
      The JSON object MUST have ONLY these three keys: "simple", "medium", and "complex".

      - "simple": "A comprehensive summary that thoroughly explains the bill, written at a 5th-grade reading level. Use at least one full paragraph. The goal is complete understanding for a young reader, not brevity."
      - "medium": "A detailed summary for a general audience, written at a 10th-grade reading level. Use at least two full paragraphs to explain the bill's purpose, main provisions, and potential impact. The goal is thoroughness for a motivated layperson."
      - "complex": "A detailed summary for a policy expert, mentioning specific legal changes, sections of code amended, and potential legal implications. The tone should be formal, objective, and comprehensive."

      Legislative Text:
      ---
      ${originalText}
    `;
    const summaryResult = await generativeModel.generateContent(summaryPrompt);
    const summaries = JSON.parse(summaryResult.response.text());

    // --- Step 2: Generate Vector Embedding ---
    console.log(`- Generating vector embedding for ${billData.bill_number}...`);
    const textForEmbedding = [
        `Title: ${billData.title}`,
        `Description: ${billData.description}`,
        `Expert Summary: ${summaries.complex}`
    ].join("\n\n");

    const embeddingResult = await embeddingModel.embedContent(textForEmbedding);
    const embedding = embeddingResult.embedding.values;

    // --- Step 3: Update Database with Summaries, Text, and Embedding ---
    const billToUpsert = {
        id: billData.bill_id, bill_number: billData.bill_number, title: billData.title,
        description: billData.description, status: String(billData.status),
        state_link: billData.state_link, change_hash: billData.change_hash,
        original_text: originalText, summary_simple: summaries.simple,
        summary_medium: summaries.medium, summary_complex: summaries.complex,
        embedding: embedding,
    };

    const { error: upsertError } = await supabaseAdmin.from("bills").upsert(billToUpsert, { onConflict: "id" });
    if (upsertError) throw upsertError;

    const successMessage = `✅ Successfully processed, summarized, and embedded bill ${billData.bill_number}.`;
    console.log(successMessage);
    return new Response(JSON.stringify({ message: successMessage }), { headers: corsHeaders });

  } catch (error) {
    console.error("Function failed:", error);
    return new Response(JSON.stringify({ error: error.message, stack: error.stack }), {
      status: 500, headers: corsHeaders
    });
  }
});
---
File: ../supabase/functions/sync-updated-bills/deno.json
---
{
  "imports": {
    "npm:@supabase/supabase-js@2": "npm:@supabase/supabase-js@2",
    "npm:@google/generative-ai": "npm:@google/generative-ai",
    "https://deno.land/x/deno_dom/deno-dom-wasm.ts": "https://deno.land/x/deno_dom/deno-dom-wasm.ts"
  }
}
---
File: ../supabase/functions/sync-legislators-and-votes/deno.json
---
{
  "imports": {
    "npm:@supabase/supabase-js@2": "npm:@supabase/supabase-js@2",
    "std/": "https://deno.land/std@0.177.0/"
  }
}
---
File: ../supabase/functions/sync-legislators-and-votes/index.ts
---
// supabase/functions/sync-legislators-and-votes/index.ts

import { serve } from "std/http/server.ts";
import { createClient } from "npm:@supabase/supabase-js@2";

const LEGISCAN_API_KEY = Deno.env.get("LEGISCAN_API_KEY")!;

serve(async (req) => {
  try {
    const serviceRoleKey = Deno.env.get("SUPABASE_SERVICE_ROLE_KEY")!;
    const supabaseUrl = Deno.env.get("SUPABASE_URL")!;
    const supabaseAdmin = createClient(supabaseUrl, serviceRoleKey);

    // 1. Fetch all legislators from the LegiScan API for a specific state (e.g., CA)
    const legislatorsResponse = await fetch(`https://api.legiscan.com/?key=${LEGISCAN_API_KEY}&op=getLegislators&state=CA`);
    const legislatorsData = await legislatorsResponse.json();

    if (legislatorsData.status === "ERROR") {
      throw new Error(legislatorsData.statusMessage);
    }

    const legislators = legislatorsData.legislators;

    // 2. Upsert legislators into the database
    const { data: savedLegislators, error: legislatorError } = await supabaseAdmin
      .from("legislators")
      .upsert(
        legislators.map((legislator: any) => ({
          id: legislator.people_id,
          name: legislator.name,
          chamber: legislator.chamber,
          district: legislator.district,
          party: legislator.party,
          photo_url: legislator.photo_url,
          email: legislator.email,
        })),
        { onConflict: "id" }
      );

    if (legislatorError) throw legislatorError;

    // 3. Fetch votes for each bill
    const { data: bills } = await supabaseAdmin.from("bills").select("id");
    if (!bills) throw new Error("No bills found");

    for (const bill of bills) {
      const votesResponse = await fetch(`https://api.legiscan.com/?key=${LEGISCAN_API_KEY}&op=getBillVotes&id=${bill.id}`);
      const votesData = await votesResponse.json();

      if (votesData.status === "ERROR") {
        console.error(`Could not fetch votes for bill ${bill.id}: ${votesData.statusMessage}`);
        continue;
      }

      const votes = votesData.votes;

      // 4. Upsert votes into the database
      const { error: voteError } = await supabaseAdmin
        .from("votes")
        .upsert(
          votes.map((vote: any) => ({
            bill_id: bill.id,
            legislator_id: vote.people_id,
            vote_option: vote.vote,
          })),
          { onConflict: "bill_id,legislator_id" }
        );

      if (voteError) console.error(`Error saving votes for bill ${bill.id}:`, voteError);
    }

    return new Response(JSON.stringify({ message: "Sync complete" }), {
      headers: { "Content-Type": "application/json" },
    });
  } catch (error) {
    return new Response(JSON.stringify({ error: error.message }), {
      headers: { "Content-Type": "application/json" },
      status: 500,
    });
  }
});
---
File: ../supabase/functions/send-push-notifications/deno.json
---
{
  "imports": {
    "npm:@supabase/supabase-js@2": "npm:@supabase/supabase-js@2",
    "std/": "https://deno.land/std@0.224.0/",
    "supabase-functions": "https://deno.land/x/supabase_functions@v0.1.0/mod.ts"
  }
}

---
File: ../supabase/functions/send-push-notifications/index.ts
---
// supabase/functions/send-push-notifications/index.ts

import { serve } from "std/http/server.ts";
// **THE FIX:** The import now uses the 'npm:' specifier to match the deno.json
import { createClient } from "npm:@supabase/supabase-js@2";

serve(async (req) => {
  try {
    const serviceRoleKey = Deno.env.get("SUPABASE_SERVICE_ROLE_KEY")!;
    const supabaseUrl = Deno.env.get("SUPABASE_URL")!;
    const supabaseAdmin = createClient(supabaseUrl, serviceRoleKey);

    const { billId } = await req.json();
    if (!billId) throw new Error("Missing 'billId'");

    // 1. Get the bill details
    const { data: bill, error: billError } = await supabaseAdmin
      .from("bills")
      .select("bill_number, title")
      .eq("id", billId)
      .single();

    if (billError) throw billError;

    // 2. Get the push tokens of users who have bookmarked the bill
    const { data: profiles, error: profilesError } = await supabaseAdmin
      .from("bookmarks")
      .select("profiles(expo_push_token)")
      .eq("bill_id", billId);

    if (profilesError) throw profilesError;

    const pushTokens = profiles.map((p: any) => p.profiles.expo_push_token).filter(Boolean);

    // 3. Send the push notifications
    const messages = pushTokens.map((token: string) => ({
      to: token,
      sound: "default",
      title: `Upcoming Vote on ${bill.bill_number}`,
      body: bill.title,
      data: { billId },
    }));

    const response = await fetch("https://api.expo.dev/v2/push/send", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "Accept": "application/json",
        "Accept-Encoding": "gzip, deflate",
      },
      body: JSON.stringify(messages),
    });

    const data = await response.json();

    return new Response(JSON.stringify(data), {
      headers: { "Content-Type": "application/json" },
    });
  } catch (error) {
    return new Response(JSON.stringify({ error: error.message }), {
      headers: { "Content-Type": "application/json" },
      status: 500,
    });
  }
});
---
File: ../supabase/functions/translate-bill/index.ts
---
// supabase/functions/translate-bill/index.ts

import { serve } from "https://deno.land/std@0.177.0/http/server.ts";
import { createClient } from "npm:@supabase/supabase-js@2";
import { GoogleGenerativeAI } from "npm:@google/generative-ai";

const corsHeaders = {
  "Access-Control-Allow-Origin": "*",
  "Access-Control-Allow-Headers": "authorization, x-client-info, apikey, content-type",
};

console.log("🚀 Initializing translate-bill v1.0");

serve(async (req) => {
  if (req.method === "OPTIONS") {
    return new Response("ok", { headers: corsHeaders });
  }

  try {
    const { bill_id, language_code } = await req.json();
    if (!bill_id || !language_code) {
      throw new Error("Missing required parameters: 'bill_id' and 'language_code'.");
    }

    const supabaseAdmin = createClient(Deno.env.get("SUPABASE_URL")!, Deno.env.get("SUPABASE_SERVICE_ROLE_KEY")!);

    // --- 1. Check for a cached translation first ---
    const { data: cachedTranslation } = await supabaseAdmin
      .from("bill_translations")
      .select("*")
      .eq("bill_id", bill_id)
      .eq("language_code", language_code)
      .single();

    if (cachedTranslation) {
      console.log(`✅ Cache hit for bill #${bill_id} [${language_code}]. Returning cached data.`);
      return new Response(JSON.stringify(cachedTranslation), {
        headers: { ...corsHeaders, "Content-Type": "application/json" },
        status: 200,
      });
    }

    console.log(`...Cache miss for bill #${bill_id} [${language_code}]. Generating new translation.`);

    // --- 2. If no cache, fetch the original bill content ---
    const { data: originalBill, error: billError } = await supabaseAdmin
      .from("bills")
      .select("title, description, summary_simple, summary_medium, summary_complex")
      .eq("id", bill_id)
      .single();

    if (billError) throw billError;

    // --- 3. Generate the translation with Gemini ---
    const geminiApiKey = Deno.env.get("GEMINI_API_KEY");
    if (!geminiApiKey) throw new Error("GEMINI_API_KEY is not set.");
    
    const genAI = new GoogleGenerativeAI(geminiApiKey);
    const model = genAI.getGenerativeModel({
      model: "gemini-1.5-flash-latest",
      generationConfig: { responseMimeType: "application/json" },
    });

    const prompt = `
      Translate the following legislative bill content into the language with ISO 639-1 code "${language_code}".
      Return a JSON object with the exact keys: "title", "description", "summary_simple", "summary_medium", "summary_complex".
      Ensure the translation is accurate and maintains the professional tone of the original text.

      Original Content (JSON):
      ---
      ${JSON.stringify(originalBill)}
    `;
    
    const result = await model.generateContent(prompt);
    const newTranslation = JSON.parse(result.response.text());

    // --- 4. Cache the new translation in the database ---
    const translationToCache = { bill_id, language_code, ...newTranslation };

    const { error: insertError } = await supabaseAdmin
      .from("bill_translations")
      .insert(translationToCache);

    if (insertError) {
      console.error("Failed to cache translation:", insertError);
    } else {
      console.log(`✅ Successfully cached new translation for bill #${bill_id} [${language_code}].`);
    }

    // --- 5. Return the newly generated translation ---
    return new Response(JSON.stringify(translationToCache), {
      headers: { ...corsHeaders, "Content-Type": "application/json" },
      status: 200,
    });

  } catch (error) {
    console.error("Function failed:", error);
    return new Response(JSON.stringify({ error: error.message }), {
      status: 500,
      headers: { ...corsHeaders, "Content-Type": "application/json" },
    });
  }
});
---
File: ../supabase/functions/translate-bill/deno.json
---
{
  "imports": {
    "npm:@supabase/supabase-js@2": "npm:@supabase/supabase-js@2",
    "npm:@google/generative-ai": "npm:@google/generative-ai",
    "https://deno.land/std@0.177.0/http/server.ts": "https://deno.land/std@0.177.0/http/server.ts"
  }
}
---
File: ../supabase/config.toml
---
# This is the main configuration file for your Supabase project.
# It's used by the Supabase CLI to manage your local development environment
# and to deploy your project to the Supabase platform.

[functions.sync-updated-bills]
# This is our main data pipeline, run daily by a cron job.
verify_jwt = false
import_map = "./functions/sync-updated-bills/deno.json"

[functions.verify-app-check]
# This function is called by the app for security and must not require a JWT.
verify_jwt = false
import_map = "./functions/verify-app-check/deno.json"

[functions.send-push-notifications]
# This function will be called with a service_role key and requires a valid JWT.
verify_jwt = true
import_map = "./functions/send-push-notifications/deno.json"

[functions.sync-legislators-and-votes]
verify_jwt = false
import_map = "./functions/sync-legislators-and-votes/deno.json"

[functions.translate-bill]
verify_jwt = false
import_map = "./functions/translate-bill/deno.json"
---
File: ../supabase/env.example
---
# Example environment variables for Supabase Functions.
# Copy this file to .env and fill in your actual secrets.

SUPABASE_URL=https://klpwiiszmzzfvlbfsjrd.supabase.co
SUPABASE_SERVICE_ROLE_KEY=<PASTE_YOUR_SERVICE_ROLE_KEY_HERE>
LEGISCAN_API_KEY=<PASTE_YOUR_LEGISCAN_API_KEY_HERE>
GEMINI_API_KEY=<PASTE_YOUR_GEMINI_API_KEY_HERE>
---
File: ../supabase/config.sql
---
-- Create the table to store app configuration
CREATE TABLE app_config (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  key TEXT UNIQUE NOT NULL,
  value TEXT NOT NULL,
  created_at TIMESTAMPTZ DEFAULT NOW()
);

-- Enable RLS
ALTER TABLE app_config ENABLE ROW LEVEL SECURITY;

-- Policy: Allow authenticated users to read the configuration
CREATE POLICY "Allow authenticated users to read config"
ON app_config
FOR SELECT
TO authenticated
USING (true);

-- Insert the configuration values
-- Replace the placeholder values with your actual secrets
INSERT INTO app_config (key, value) VALUES
  ('EXPO_PUBLIC_OPENSTATES_API_KEY', 'YOUR_OPENSTATES_API_KEY'),
  ('EXPO_PUBLIC_LOCATIONIQ_API_KEY', 'YOUR_LOCATIONIQ_API_KEY'),
  ('EXPO_PUBLIC_RECAPTCHA_SITE_KEY', 'YOUR_RECAPTCHA_SITE_KEY'),
  ('EXPO_PUBLIC_FIREBASE_WEB_CONFIG', 'YOUR_FIREBASE_WEB_CONFIG');

---
File: package.json
---
{
  "name": "mobile-app",
  "version": "1.0.0",
  "private": true,
  "main": "expo-router/entry",
  "scripts": {
    "start": "expo start",
    "android": "expo run:android",
    "ios": "expo run:ios",
    "web": "expo start --web",
    "lint": "eslint .",
    "lint:fix": "eslint . --fix",
    "format": "prettier --write .",
    "format:check": "prettier --check .",
    "i18n:scan": "i18next-scanner"
  },
  "dependencies": {
    "@hcaptcha/react-native-hcaptcha": "^1.0.2",
    "@react-native-async-storage/async-storage": "2.1.2",
    "@react-native-firebase/app": "^22.4.0",
    "@react-native-firebase/app-check": "^22.4.0",
    "@react-native-firebase/auth": "^22.4.0",
    "@react-native-picker/picker": "^2.11.1",
    "@supabase/supabase-js": "^2.44.4",
    "@tanstack/react-query": "^5.85.6",
    "crypto-js": "^4.2.0",
    "expo": "53.0.22",
    "expo-blur": "~14.1.5",
    "expo-clipboard": "^7.1.5",
    "expo-constants": "~17.1.0",
    "expo-dev-client": "~5.2.4",
    "expo-device": "^7.1.4",
    "expo-font": "~13.3.2",
    "expo-haptics": "~14.1.4",
    "expo-linking": "~7.1.0",
    "expo-localization": "~16.1.6",
    "expo-notifications": "^0.31.4",
    "expo-router": "~5.1.5",
    "expo-secure-store": "~14.2.4",
    "expo-speech": "^13.1.7",
    "expo-splash-screen": "~0.30.10",
    "expo-status-bar": "~2.2.3",
    "expo-symbols": "~0.4.5",
    "expo-system-ui": "~5.0.11",
    "expo-updates": "~0.28.17",
    "firebase": "^12.0.0",
    "i18next": "^25.4.2",
    "intl-pluralrules": "^2.0.1",
    "react": "19.0.0",
    "react-dom": "19.0.0",
    "react-i18next": "^15.7.2",
    "react-native": "0.79.5",
    "react-native-awesome-slider": "^2.9.0",
    "react-native-gesture-handler": "~2.24.0",
    "react-native-modal": "^13.0.1",
    "react-native-paper": "^5.14.5",
    "react-native-picker-select": "^9.3.1",
    "react-native-reanimated": "~3.17.4",
    "react-native-safe-area-context": "5.4.0",
    "react-native-screens": "~4.11.1",
    "react-native-toast-message": "^2.2.0",
    "react-native-url-polyfill": "^2.0.0",
    "react-native-vector-icons": "^10.2.0",
    "react-native-web": "^0.20.0",
    "react-native-webview": "13.13.5"
  },
  "devDependencies": {
    "@babel/core": "^7.2.0",
    "@testing-library/jest-native": "5.4.3",
    "@testing-library/react-native": "13.3.3",
    "@types/crypto-js": "^4.2.2",
    "@types/react": "~19.0.10",
    "babel-plugin-module-resolver": "^5.0.2",
    "eslint": "^8.57.1",
    "eslint-config-expo": "~9.2.0",
    "eslint-config-prettier": "^9.1.0",
    "eslint-import-resolver-babel-module": "^5.3.2",
    "eslint-import-resolver-typescript": "^3.10.1",
    "eslint-plugin-i18next": "^6.1.3",
    "eslint-plugin-import": "^2.32.0",
    "eslint-plugin-prettier": "^5.5.1",
    "eslint-plugin-react-hooks": "^5.2.0",
    "expo-build-properties": "^0.14.8",
    "i18next-scanner": "^4.6.0",
    "jest": "29.7.0",
    "jest-expo": "~53.0.10",
    "msw": "^2.10.5",
    "prettier": "^3.6.2",
    "pretty-format": "29.7.0",
    "typescript": "~5.8.3",
    "whatwg-fetch": "^3.6.20"
  },
  "expo": {
    "doctor": {
      "reactNativeDirectoryCheck": {
        "listUnknownPackages": false
      }
    }
  }
}

---
File: app.json
---
{
  "expo": {
    "name": "AI Advocate",
    "slug": "ai-advocate",
    "owner": "joela510",
    "version": "1.0.0",
    "orientation": "portrait",
    "icon": "./assets/images/icon.png",
    "scheme": "mobileapp",
    "userInterfaceStyle": "automatic",
    "description": "An AI-powered legal assistant app.",
    "githubUrl": "https://github.com/JoelA510/AIAdvocate",
    "android": {
      "adaptiveIcon": {
        "foregroundImage": "./assets/images/icon-foreground.png",
        "backgroundColor": "#151718"
      },
      "package": "com.loveneverfails.aiadvocate",
      "googleServicesFile": "./google-services.json",
      "versionCode": 1
    },
    "ios": {
      "supportsTablet": true,
      "bundleIdentifier": "com.loveneverfails.aiadvocate",
      "googleServicesFile": "./GoogleService-Info.plist",
      "infoPlist": {
        "ITSAppUsesNonExemptEncryption": false
      },
      "buildNumber": "1"
    },
    "web": {
      "bundler": "metro",
      "output": "static",
      "favicon": "./assets/images/favicon.png"
    },
    "plugins": [
      "expo-router",
      "expo-font",
      "expo-updates",
      [
        "expo-splash-screen",
        {
          "image": "./assets/images/splash-icon.png",
          "resizeMode": "contain",
          "backgroundColor": "#ffffff"
        }
      ],
      "@react-native-firebase/app",
      "@react-native-firebase/auth",
      "@react-native-firebase/app-check",
      [
        "expo-build-properties",
        {
          "ios": {
            "useFrameworks": "static",
            "deploymentTarget": "15.1"
          },
          "android": {
            "minSdkVersion": 24
          }
        }
      ],
      "expo-secure-store",
      "expo-localization"
    ],
    "experiments": {
      "typedRoutes": true
    },
    "extra": {
      "router": {
        "origin": false
      },
      "eas": {
        "projectId": "2815e517-2761-4f1b-a1d9-57dc978c3b0c"
      }
    },
    "updates": {
      "url": "https://u.expo.dev/2815e517-2761-4f1b-a1d9-57dc978c3b0c"
    },
    "runtimeVersion": "1.0.0"
  }
}

---
File: babel.config.js
---
// mobile-app/babel.config.js (modified)
module.exports = function (api) {
  api.cache(true);
  return {
    presets: ["babel-preset-expo"],
    plugins: [
      // Path alias for "@/...". This resolves imports like "@/src/components".
      [
        "module-resolver",
        {
          root: ["./"],
          alias: { "@": "./src", "~": "./" },
          extensions: [".tsx", ".ts", ".jsx", ".js", ".json"],
        },
      ],

      // MUST be last to support React Native Reanimated.
      "react-native-reanimated/plugin",
    ],
  };
};

---
File: tsconfig.json
---
{
  "extends": "expo/tsconfig.base",
  "compilerOptions": {
    "types": ["expo-router"]
  },
  "strict": true,
  "baseUrl": ".",
  "paths": {
    "@/*": ["src/*"],
    "~/*": ["*"]
  },
  "resolveJsonModule": true,
  "include": ["**/*.ts", "**/*.tsx", ".expo/types/**/*.ts", "expo-env.d.ts", "env.d.ts"]
}

---
File: ../README.md
---
```markdown
# AI Advocate

AI Advocate is a privacy-first mobile application designed to Educate, Empower, and Employ. It makes complex legislative bills accessible and provides tools for users to engage directly with their representatives, with a special focus on survivors of domestic violence, human trafficking, and sexual assault.

> **Project Status:** **V1 Complete & Stable.** The core feature set has been fully implemented. The application is production-ready and built on a robust, scalable, and efficient serverless architecture.

## Core Features

-   ✅ **On-Demand Multilingual Support:** The app automatically detects the user's device language and provides on-demand, AI-powered translations for all bill content. An intelligent caching layer ensures translations are only generated once per language, minimizing API costs and providing instant delivery for subsequent requests.

-   ✅ **AI-Powered Bill Discovery:** A "Related Bills" feature uses AI-generated vector embeddings and semantic search (`pgvector`) to help users discover other legislation that is contextually similar to the bill they are currently viewing.

-   ✅ **Comprehensive Bill Feed:** The main "Bills" tab displays a complete, searchable list of all legislation relevant to the app's mission, with a dedicated "Highlighted" feed for curated content.

-   ✅ **Multi-Level AI Summaries:** Bills can be viewed in four formats (Simple, Medium, Complex, and Original Text) using a sleek summary slider, ensuring the content is accessible to all reading levels.

-   ✅ **Text-to-Speech Accessibility:** A "Speak" button provides an audio read-out of the currently selected bill summary, enhancing accessibility for all users.

-   ✅ **Full Advocacy Workflow:**
    -   Find state legislators by address using a multi-stage API pipeline (LocationIQ & OpenStates).
    -   View legislator contact details and generate pre-filled email templates for a selected bill.

-   ✅ **Push Notifications for Saved Bills:** Users can subscribe to updates on specific bills simply by bookmarking them. The foundation is in place to notify users of important status changes or upcoming votes.

-   ✅ **User Reactions & Bookmarks:** Users can express their sentiment on bills with upvote/downvote reactions and save bills to a private list for later reference.

-   ✅ **Secure & Private by Design:** All user actions are tied to a unique, anonymous identity created automatically on first launch, with no personal information ever required.

## Technical Architecture

-   **Frontend:** React Native (Expo) with Expo Router for file-based navigation.
-   **UI Library:** React Native Paper for a modern, Material Design component system.
-   **Internationalization:** `i18next` with `expo-localization` for automatic language detection.
-   **Backend:** A fully serverless backend powered by Supabase:
    -   **Database:** Supabase Postgres with the `pgvector` extension for semantic search.
    -   **Authentication:** Supabase Auth for seamless anonymous user sessions.
    -   **Serverless Functions:** Deno Edge Functions manage the entire data pipeline.
-   **AI:** Google's Gemini API:
    -   `gemini-1.5-flash` for all summarization and on-demand translation tasks.
    -   `embedding-001` for generating vector embeddings for bill discovery.
-   **Testing & CI:** Jest with React Testing Library for component testing, and GitHub Actions for continuous integration.

---

## Key Architectural Decisions

*   **Efficient AI Pipeline:** The core data ingestion function (`sync-updated-bills`) has been highly optimized. It now uses a single API call to generate all three summary tiers and the vector embedding simultaneously, significantly reducing cost and processing time.

*   **On-Demand Caching:** To provide multilingual support affordably and at scale, the system uses an on-demand caching strategy. The `translate-bill` function first checks the `bill_translations` table. If a translation exists, it's served instantly. If not, the function generates it via the Gemini API and immediately saves the result, ensuring any future request for that specific translation is a cache hit.

*   **Atomic Transactions:** User actions that affect multiple database tables (e.g., bookmarking a bill and subscribing to its notifications) are handled by single, atomic RPC functions (`toggle_bookmark_and_subscription`) to ensure data consistency.

*   **Client-Side Resilience:** All critical API calls from the mobile app are wrapped in a `safeFetch` utility that provides automatic retries with exponential backoff, making the app more resilient to transient network errors or API rate limiting.

---

## Getting Started: A Guide for New Developers

This guide will walk you through setting up the entire project, from the backend infrastructure to the local development environment.

### Prerequisites

Before you begin, ensure you have the following installed on your machine:
-   **Node.js (v20 LTS recommended):** It is highly recommended to manage Node versions with [NVM](https://github.com/nvm-sh/nvm).
-   **Yarn:** The project's required package manager. Install with `npm install -g yarn`.
-   **Supabase CLI:** Follow the [official installation guide](https://supabase.com/docs/guides/cli/getting-started).
-   **Git:** For version control.

### Step 1: Clone the Repository

Clone the project to your local machine:
```bash
git clone <your-repository-url>
cd AIAdvocate
```

### Step 2: Set Up the Supabase Backend

1.  **Log in to Supabase:**
    ```bash
    supabase login
    ```
2.  **Link the Project:** Link your local repository to your remote Supabase project. You will need your Project REF, which can be found in your Supabase project's URL (e.g., `https://supabase.com/dashboard/project/<project_ref>`).
    ```bash
    supabase link --project-ref <your-project_ref>
    ```
3.  **Push the Database Schema:** This command will execute the `schema.sql` file and create all necessary tables and functions in your remote database.
    ```bash
    supabase db push
    ```

### Step 3: Configure Environment Variables

This project uses two separate `.env` files for security and clarity.

1.  **Backend Secrets (`supabase/.env`):**
    *   Navigate to the `supabase/` directory.
    *   Create a copy of the example file: `cp .env.example .env`
    *   Open the new `.env` file and fill in your secret keys for Supabase, LegiScan, and Gemini.

2.  **Frontend Public Keys (`mobile-app/.env`):**
    *   Navigate to the `mobile-app/` directory.
    *   Create a `.env` file and add the following public keys:
    ```
    EXPO_PUBLIC_SUPABASE_URL=https://<your-project_ref>.supabase.co
    EXPO_PUBLIC_SUPABASE_ANON_KEY=<your_supabase_anon_key>
    EXPO_PUBLIC_OPENSTATES_API_KEY=<your_openstates_api_key>
    EXPO_PUBLIC_LOCATIONIQ_API_KEY=<your_locationiq_api_key>
    ```

### Step 4: Install Frontend Dependencies

1.  Navigate to the `mobile-app/` directory.
2.  Install all required packages using Yarn:
    ```bash
    yarn install
    ```
3.  **Important:** If you encounter dependency errors after upgrading packages in the future, the canonical fix is:
    ```bash
    npx expo install --fix
    ```

---

## Developer Workflows & Project Structure

*   **Authentication Flow:** The app uses a fully autonomous `AuthProvider` that silently creates an anonymous user on first launch. The app's entry point (`app/index.tsx`) is a theme-aware, animated splash screen that provides a seamless visual transition into the main `(tabs)` layout.

*   **Native vs. JavaScript Changes:** It is critical to understand the difference between a change that can be deployed instantly (JS-only) and a change that requires a new app store submission (native).
    *   **A new build (`eas build`) is required if you:**
        *   Add or update a package that has native code (e.g., `expo-clipboard`).
        *   Change any configuration in `app.json` under the `android` or `ios` keys (e.g., `displayName`, `edgeToEdge`, `package`).
        *   Change any native asset files, such as the app icon images.
    *   **An OTA update (`eas update`) is sufficient if you:**
        *   Only change your own JavaScript/TypeScript code in the `app/` or `src/` directories.

*   **Native Project Regeneration:** If the native project files (`android` and `ios`) become out of sync with `app.json`, the definitive solution is to delete the problematic directory and regenerate it:
    ```bash
    # From the mobile-app directory
    npx expo prebuild --platform android --clean
    ```

*   **Data Pipeline (Representatives):** The "Find Your Rep" feature uses a three-stage API pipeline:
    1.  **Geocoding:** The user's address is sent to the **LocationIQ API** to get coordinates.
    2.  **Search:** The coordinates are sent to the **OpenStates API's** `/people.geo` endpoint to get a list of basic legislator objects.
    3.  **Enrichment:** The app then makes individual API calls for each state-level legislator to the `/people/{ocd-id}` endpoint to fetch their full, detailed profile, including contact information.

---

## Deployment Guide

#### Deploying the Native Mobile App (iOS & Android)

The native app is built and updated using EAS (Expo Application Services).

1.  **Initial Production Build:**
    *   To create a new app binary (`.aab` or `.ipa`) for the app stores, run the following from the `mobile-app` directory:
    ```bash
    eas build --platform all --profile production
    ```
    *   This binary must be submitted to the Google Play Console and Apple App Store Connect.

2.  **Over-the-Air (OTA) Updates:**
    *   After a production build is live in the stores, you can push JavaScript-only changes directly to users with an OTA update.
    ```bash
    eas update --branch production --message "Your update message"
    ```

3.  **Development Build:**
    *   If you add any new native dependencies, you must create and install a new development build on your test device:
    ```bash
    eas build --platform android --profile development
    ```

#### Deploying the Web App

The web app is deployed as a static site.

1.  **Build the Web App:**
    *   From the `mobile-app` directory, run the export command:
    ```bash
    yarn expo export
    ```
    *   This will generate a `dist` folder containing the complete, standalone web application.

2.  **Deploy the `dist` Folder:**
    *   Deploy the contents of the `dist` folder to any static web hosting provider.
    *   The recommended method is to use a service like **Netlify** or **Vercel**, which often feature a simple drag-and-drop interface for deployment.

---

## V1 Complete: The Road Ahead

The application is now in a stable, feature-complete state. Future development can focus on iterative improvements, maintenance, and the implementation of new, high-value features. The foundation has been laid for:

-   `[ ]` **Expanded Test Coverage:** Write comprehensive unit and integration tests for all major components and user flows.
-   `[ ]` **Notification Dispatch:** Build the final Edge Function to read from the `subscriptions` table and dispatch push notifications via Expo's push API.
-   `[ ]` **Private Encrypted Notes:** Implement the ability for users to add private, client-side encrypted notes to their saved bills using the `encryption.ts` utility.
-   `[ ]` **Expanded Analytics:** Integrate additional `trackEvent` calls to gather anonymous data on feature usage, such as shares, saves, and advocacy actions.
-   `[ ]` **Additional Languages:** Add new `[lang].json` files and potentially fine-tune AI prompts to support a wider range of languages.
```markdown
---
