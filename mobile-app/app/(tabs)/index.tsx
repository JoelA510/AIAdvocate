import { useState, useEffect } from "react";import { StyleSheet, FlatList, View } from "react-native";import BillComponent from "../../src/components/Bill";import BillSkeleton from "../../src/components/BillSkeleton";import EmptyState from "../../src/components/EmptyState";import { ThemedView } from "../../components/ThemedView";import { ThemedText } from "../../components/ThemedText";import { supabase } from "../../src/lib/supabase";export default function HomeScreen() {  const [bills, setBills] = useState<any[]>([]);  const [loading, setLoading] = useState(true);  const [error, setError] = useState<string | null>(null);  useEffect(() => {    setLoading(true);    const fetchBills = async () => {      try {        let query = supabase          .from("bills")          .select("*")          .eq("is_lnf_highlighted", true)          .order("id", { ascending: false });        const { data, error } = await query;        if (error) throw error;        setBills(data);      } catch (err: any) {        setError(err.message);      } finally {        setLoading(false);      }    };    fetchBills();  }, []);  const renderContent = () => {    if (loading) {      return (        <FlatList          data={Array.from({ length: 5 })}          renderItem={() => <BillSkeleton />}          keyExtractor={(_, index) => `skeleton-${index}`}          scrollEnabled={false}        />      );    }    if (error) {      return (        <EmptyState          icon="chevron.left.forwardslash.chevron.right"          title="An Error Occurred"          message={`We couldn't fetch the bills. Please try again later. \n(${error})`}        />      );    }    if (bills.length === 0) {      return (        <EmptyState          icon="file-search-outline"          title="No Highlighted Bills"          message="There are no bills highlighted by Love Never Fails at the moment."        />      );    }    return (      <FlatList        data={bills}        keyExtractor={(item) => item.id.toString()}        renderItem={({ item }) => <BillComponent bill={item} />}        contentContainerStyle={{ paddingBottom: 40 }}      />    );  };  return (    <ThemedView style={styles.container}>      <View style={styles.header}>        <ThemedText type="title" style={styles.title}>          LNF Highlights        </ThemedText>      </View>      <View style={styles.content}>{renderContent()}</View>    </ThemedView>  ); } const styles = StyleSheet.create({  container: {    flex: 1,  },  header: {    padding: 16,    paddingTop: 60,  },  title: {    fontWeight: "bold",    marginBottom: 16,    fontSize: 32,    lineHeight: 32,  },  content: {    flex: 1,    paddingHorizontal: 16,  },});