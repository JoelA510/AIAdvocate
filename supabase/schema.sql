-- ===============================================================================================
-- AI ADVOCATE: COMPLETE DATABASE SCHEMA
-- Version: 1.4 (Idempotent, with Bill Details & Reaction RPCs)
--
-- This script is safe to re-run. It creates all necessary tables, extensions, functions,
-- and security policies for the AI Advocate application.
-- ===============================================================================================

-- SECTION 1: EXTENSIONS
CREATE EXTENSION IF NOT EXISTS supabase_vault;
CREATE EXTENSION IF NOT EXISTS pg_cron;
CREATE EXTENSION IF NOT EXISTS http;

-- SECTION 2: TABLE DEFINITIONS
CREATE TABLE IF NOT EXISTS public.bills (
  id BIGINT PRIMARY KEY, bill_number TEXT NOT NULL, title TEXT NOT NULL, description TEXT,
  status TEXT, state_link TEXT, summary_simple TEXT, summary_medium TEXT, summary_complex TEXT,
  panel_review JSONB, is_verified BOOLEAN DEFAULT FALSE, created_at TIMESTAMPTZ DEFAULT NOW(),
  change_hash TEXT, is_curated BOOLEAN DEFAULT FALSE, original_text TEXT
);
CREATE TABLE IF NOT EXISTS public.profiles (id UUID PRIMARY KEY REFERENCES auth.users(id) ON DELETE CASCADE);
CREATE TABLE IF NOT EXISTS public.reactions (
  bill_id BIGINT NOT NULL REFERENCES public.bills(id) ON DELETE CASCADE,
  user_id UUID NOT NULL REFERENCES public.profiles(id) ON DELETE CASCADE,
  reaction_type TEXT NOT NULL, created_at TIMESTAMPTZ DEFAULT NOW(), PRIMARY KEY (bill_id, user_id)
);
CREATE TABLE IF NOT EXISTS public.bookmarks (
  bill_id BIGINT NOT NULL REFERENCES public.bills(id) ON DELETE CASCADE,
  user_id UUID NOT NULL REFERENCES public.profiles(id) ON DELETE CASCADE,
  created_at TIMESTAMPTZ DEFAULT NOW(), PRIMARY KEY (bill_id, user_id)
);
CREATE TABLE IF NOT EXISTS public.legislators (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, name TEXT NOT NULL, party TEXT,
  district TEXT, is_lnf_ally BOOLEAN DEFAULT FALSE, created_at TIMESTAMPTZ DEFAULT NOW()
);
CREATE TABLE IF NOT EXISTS public.votes (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  bill_id BIGINT NOT NULL REFERENCES public.bills(id) ON DELETE CASCADE,
  legislator_id BIGINT NOT NULL REFERENCES public.legislators(id) ON DELETE CASCADE,
  vote TEXT NOT NULL, created_at TIMESTAMPTZ DEFAULT NOW(), UNIQUE(bill_id, legislator_id)
);
CREATE TABLE IF NOT EXISTS public.cron_job_errors (
  id BIGINT GENERATED ALWAYS AS IDENTITY PRIMARY KEY, job_name TEXT NOT NULL,
  error_message TEXT NOT NULL, occurred_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- SECTION 3: INDEXES
CREATE INDEX IF NOT EXISTS idx_bills_change_hash ON public.bills(change_hash);
CREATE INDEX IF NOT EXISTS idx_bills_bill_number ON public.bills(bill_number);
CREATE INDEX IF NOT EXISTS idx_cron_job_errors_occurred_at ON public.cron_job_errors (occurred_at);

-- SECTION 4: DATABASE FUNCTIONS & TRIGGERS
CREATE OR REPLACE FUNCTION public.handle_new_user() RETURNS TRIGGER AS $$ BEGIN INSERT INTO public.profiles (id) VALUES (new.id); RETURN new; END; $$ LANGUAGE plpgsql SECURITY DEFINER;
DROP TRIGGER IF EXISTS on_auth_user_created ON auth.users;
CREATE TRIGGER on_auth_user_created AFTER INSERT ON auth.users FOR EACH ROW EXECUTE PROCEDURE public.handle_new_user();

CREATE OR REPLACE FUNCTION public.cleanup_old_cron_job_errors() RETURNS VOID AS $$ BEGIN DELETE FROM public.cron_job_errors WHERE occurred_at < NOW() - INTERVAL '30 days'; END; $$ LANGUAGE plpgsql SECURITY DEFINER;

CREATE OR REPLACE FUNCTION public.invoke_sync_updated_bills() RETURNS VOID AS $$ DECLARE status_code INT; anon_key TEXT; BEGIN anon_key := vault.get_secret('supabase_anon_key'); SELECT status INTO status_code FROM net.http_post( url:='https://klpwiiszmzzfvlbfsjrd.supabase.co/functions/v1/sync-updated-bills', headers:='{"Content-Type": "application/json", "apikey": "' || anon_key || '"}'); IF status_code != 200 THEN INSERT INTO public.cron_job_errors (job_name, error_message) VALUES ('daily-bill-sync', 'Invoke Error: Edge Function returned status ' || status_code); END IF; END; $$ LANGUAGE plpgsql SECURITY DEFINER;

CREATE OR REPLACE FUNCTION public.get_bill_details_for_user(p_bill_id BIGINT, p_user_id UUID)
RETURNS JSONB AS $$
DECLARE
    bill_details JSONB;
    reaction_counts JSONB;
    user_reaction_type TEXT;
    is_bookmarked BOOLEAN;
BEGIN
    SELECT to_jsonb(b) INTO bill_details FROM public.bills b WHERE b.id = p_bill_id;
    SELECT jsonb_object_agg(reaction_type, count) INTO reaction_counts FROM (SELECT reaction_type, COUNT(*) AS count FROM public.reactions WHERE bill_id = p_bill_id GROUP BY reaction_type) AS counts;
    SELECT reaction_type INTO user_reaction_type FROM public.reactions WHERE bill_id = p_bill_id AND user_id = p_user_id;
    SELECT EXISTS (SELECT 1 FROM public.bookmarks WHERE bill_id = p_bill_id AND user_id = p_user_id) INTO is_bookmarked;
    RETURN jsonb_build_object('bill', bill_details, 'reaction_counts', COALESCE(reaction_counts, '{}'::jsonb), 'user_reaction', user_reaction_type, 'is_bookmarked', is_bookmarked);
END;
$$ LANGUAGE plpgsql STABLE;

-- **NEWLY ADDED:** RPC function to handle user reactions (upvote, downvote, etc.)
CREATE OR REPLACE FUNCTION public.handle_reaction(p_bill_id BIGINT, p_user_id UUID, p_reaction_type TEXT)
RETURNS void AS $$
DECLARE
  existing_reaction TEXT;
BEGIN
  -- Check if a reaction for this user and bill already exists
  SELECT reaction_type INTO existing_reaction
  FROM public.reactions
  WHERE user_id = p_user_id AND bill_id = p_bill_id;

  -- If a reaction exists
  IF FOUND THEN
    -- If the user is clicking the same reaction button again, delete the reaction (toggle off)
    IF existing_reaction = p_reaction_type THEN
      DELETE FROM public.reactions
      WHERE user_id = p_user_id AND bill_id = p_bill_id;
    -- If the user is clicking a different reaction button, update the existing one
    ELSE
      UPDATE public.reactions
      SET reaction_type = p_reaction_type, created_at = NOW()
      WHERE user_id = p_user_id AND bill_id = p_bill_id;
    END IF;
  -- If no reaction exists, insert a new one
  ELSE
    INSERT INTO public.reactions (user_id, bill_id, reaction_type)
    VALUES (p_user_id, p_bill_id, p_reaction_type);
  END IF;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- SECTION 5: ROW-LEVEL SECURITY (RLS) POLICIES
ALTER TABLE public.bills ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.profiles ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.reactions ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.bookmarks ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.legislators ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.votes ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.cron_job_errors ENABLE ROW LEVEL SECURITY;

DROP POLICY IF EXISTS "Public can view bills" ON public.bills;
CREATE POLICY "Public can view bills" ON public.bills FOR SELECT USING (true);
DROP POLICY IF EXISTS "Public can view profiles" ON public.profiles;
CREATE POLICY "Public can view profiles" ON public.profiles FOR SELECT USING (true);
DROP POLICY IF EXISTS "Public can view legislators" ON public.legislators;
CREATE POLICY "Public can view legislators" ON public.legislators FOR SELECT USING (true);
DROP POLICY IF EXISTS "Public can view votes" ON public.votes;
CREATE POLICY "Public can view votes" ON public.votes FOR SELECT USING (true);
DROP POLICY IF EXISTS "Public can view reactions" ON public.reactions;
CREATE POLICY "Public can view reactions" ON public.reactions FOR SELECT USING (true);
DROP POLICY IF EXISTS "Users can manage their own reactions" ON public.reactions;
CREATE POLICY "Users can manage their own reactions" ON public.reactions FOR ALL USING (auth.uid() = user_id);
DROP POLICY IF EXISTS "Users can view and manage their own bookmarks" ON public.bookmarks;
CREATE POLICY "Users can view and manage their own bookmarks" ON public.bookmarks FOR ALL USING (auth.uid() = user_id);
DROP POLICY IF EXISTS "Admins can view errors" ON public.cron_job_errors;
CREATE POLICY "Admins can view errors" ON public.cron_job_errors FOR SELECT USING (auth.role() = 'service_role');

-- SECTION 6: CRON JOBS
SELECT cron.schedule('daily-bill-sync', '0 10 * * *', 'SELECT public.invoke_sync_updated_bills()');
SELECT cron.schedule('cleanup-cron-job-errors', '0 0 * * 0', 'SELECT public.cleanup_old_cron_job_errors()');

-- SECTION 7: TABLE & FUNCTION COMMENTS
COMMENT ON TABLE public.bills IS 'Stores core legislative bill information and AI-generated summaries.';
COMMENT ON TABLE public.profiles IS 'Stores a public reference to an authenticated user.';
COMMENT ON TABLE public.reactions IS 'Stores user reactions to bills. Enforces one reaction per user per bill.';
COMMENT ON TABLE public.bookmarks IS 'Stores user bookmarks for bills.';
COMMENT ON TABLE public.legislators IS 'Stores information about legislators.';
COMMENT ON TABLE public.votes IS 'Stores legislator votes on specific bills.';
COMMENT ON TABLE public.cron_job_errors IS 'Logs errors from scheduled cron jobs.';
COMMENT ON FUNCTION public.handle_new_user() IS 'Creates a profile entry for a new anonymous or registered user.';
COMMENT ON FUNCTION public.get_bill_details_for_user(p_bill_id BIGINT, p_user_id UUID) IS 'Aggregates all bill details, including reaction counts and user-specific interactions, into a single JSON object.';
COMMENT ON FUNCTION public.handle_reaction(p_bill_id BIGINT, p_user_id UUID, p_reaction_type TEXT) IS 'Handles user reactions by inserting, updating, or deleting a reaction entry.';


-- ===============================================================================================
-- End of script
-- ===============================================================================================