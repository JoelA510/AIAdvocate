-- Votes backfill + daily sync schema additions

-- Enum for normalized vote choices
DO $$
BEGIN
  IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = 'vote_choice') THEN
    CREATE TYPE public.vote_choice AS ENUM (
      'yay',
      'nay',
      'abstain',
      'absent',
      'excused',
      'other'
    );
  END IF;
END $$;

ALTER TABLE public.bills
  ADD COLUMN IF NOT EXISTS openstates_bill_id TEXT;

CREATE UNIQUE INDEX IF NOT EXISTS bills_openstates_bill_id_idx
  ON public.bills(openstates_bill_id)
  WHERE openstates_bill_id IS NOT NULL;

-- Extend legislators with provider identity + metadata
ALTER TABLE public.legislators
  ADD COLUMN IF NOT EXISTS provider TEXT NOT NULL DEFAULT 'openstates',
  ADD COLUMN IF NOT EXISTS provider_person_id TEXT,
  ADD COLUMN IF NOT EXISTS title TEXT,
  ADD COLUMN IF NOT EXISTS updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW();

UPDATE public.legislators
SET provider_person_id = COALESCE(provider_person_id, 'legacy-' || id::TEXT)
WHERE provider_person_id IS NULL;

ALTER TABLE public.legislators
  ALTER COLUMN provider_person_id SET NOT NULL;

DO $$
BEGIN
  IF NOT EXISTS (
    SELECT 1
    FROM pg_constraint
    WHERE conname = 'legislators_provider_provider_person_id_key'
  ) THEN
    ALTER TABLE public.legislators
      ADD CONSTRAINT legislators_provider_provider_person_id_key UNIQUE (provider, provider_person_id);
  END IF;
END $$;

-- Vote events table
CREATE TABLE IF NOT EXISTS public.vote_events (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  provider TEXT NOT NULL DEFAULT 'openstates',
  provider_vote_event_id TEXT NOT NULL,
  bill_id BIGINT NOT NULL REFERENCES public.bills(id) ON DELETE CASCADE,
  motion TEXT,
  result TEXT,
  chamber TEXT,
  date TIMESTAMPTZ,
  updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  CONSTRAINT vote_events_provider_provider_vote_event_id_key UNIQUE (provider, provider_vote_event_id)
);

CREATE INDEX IF NOT EXISTS vote_events_bill_id_date_idx
  ON public.vote_events (bill_id, date);

-- Individual vote records
CREATE TABLE IF NOT EXISTS public.vote_records (
  vote_event_id BIGINT NOT NULL REFERENCES public.vote_events(id) ON DELETE CASCADE,
  legislator_id BIGINT NOT NULL REFERENCES public.legislators(id) ON DELETE CASCADE,
  choice public.vote_choice NOT NULL,
  provider_option TEXT,
  updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  PRIMARY KEY (vote_event_id, legislator_id)
);

-- Job state tracking
CREATE TABLE IF NOT EXISTS public.job_state (
  key TEXT PRIMARY KEY,
  last_run TIMESTAMPTZ
);

-- View for legislator voting history
CREATE OR REPLACE VIEW public.v_rep_vote_history AS
SELECT
  l.id AS legislator_id,
  l.name AS legislator_name,
  l.party,
  l.district,
  l.title,
  b.id AS bill_id,
  b.bill_number,
  b.title AS bill_title,
  ve.id AS vote_event_id,
  ve.date AS vote_date,
  ve.motion,
  ve.result AS vote_result,
  vr.choice AS vote_choice
FROM public.vote_records vr
JOIN public.vote_events ve ON ve.id = vr.vote_event_id
JOIN public.bills b ON b.id = ve.bill_id
JOIN public.legislators l ON l.id = vr.legislator_id;

-- Enable and secure RLS
ALTER TABLE public.vote_events ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.vote_records ENABLE ROW LEVEL SECURITY;

DO $$
BEGIN
  IF NOT EXISTS (
    SELECT 1 FROM pg_policies WHERE schemaname = 'public' AND tablename = 'vote_events' AND policyname = 'vote_events_read'
  ) THEN
    CREATE POLICY vote_events_read
      ON public.vote_events
      FOR SELECT
      USING (true);
  END IF;

  IF NOT EXISTS (
    SELECT 1 FROM pg_policies WHERE schemaname = 'public' AND tablename = 'vote_records' AND policyname = 'vote_records_read'
  ) THEN
    CREATE POLICY vote_records_read
      ON public.vote_records
      FOR SELECT
      USING (true);
  END IF;

  IF NOT EXISTS (
    SELECT 1 FROM pg_policies WHERE schemaname = 'public' AND tablename = 'vote_events' AND policyname = 'vote_events_write_service'
  ) THEN
    CREATE POLICY vote_events_write_service
      ON public.vote_events
      FOR ALL
      USING (auth.role() = 'service_role')
      WITH CHECK (auth.role() = 'service_role');
  END IF;

  IF NOT EXISTS (
    SELECT 1 FROM pg_policies WHERE schemaname = 'public' AND tablename = 'vote_records' AND policyname = 'vote_records_write_service'
  ) THEN
    CREATE POLICY vote_records_write_service
      ON public.vote_records
      FOR ALL
      USING (auth.role() = 'service_role')
      WITH CHECK (auth.role() = 'service_role');
  END IF;
END $$;

GRANT SELECT ON public.v_rep_vote_history TO anon, authenticated;
